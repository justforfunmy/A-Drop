[
	{
		"meta": "CRA",
		"path": "CRA_adding-css-modules.md",
		"name": "adding-css-modules.md"
	},
	{
		"meta": "CRA",
		"path": "CRA_adding-sass.md",
		"name": "adding-sass.md"
	},
	{
		"meta": "CRA",
		"path": "CRA_adding-stylesheets.md",
		"name": "adding-stylesheets.md"
	},
	{
		"meta": "CRA",
		"path": "CRA_available-scripts.md",
		"name": "available-scripts.md"
	},
	{
		"meta": "CRA",
		"path": "CRA_bundle-size.md",
		"name": "bundle-size.md"
	},
	{
		"meta": "CRA",
		"path": "CRA_editor-setup.md",
		"name": "editor-setup.md"
	},
	{
		"meta": "CRA",
		"path": "CRA_folder-structure.md",
		"name": "folder-structure.md"
	},
	{
		"meta": "CRA",
		"path": "CRA_getting-started.md",
		"name": "getting-started.md"
	},
	{
		"meta": "CRA",
		"path": "CRA_https-in-development.md",
		"name": "https-in-development.md"
	},
	{
		"meta": "CRA",
		"path": "CRA_isolated-components.md",
		"name": "isolated-components.md"
	},
	{
		"meta": "CRA",
		"path": "CRA_supported-browsers.md",
		"name": "supported-browsers.md"
	},
	{
		"meta": "CRA",
		"path": "CRA_update-new-release.md",
		"name": "update-new-release.md"
	},
	{
		"meta": "CSS",
		"path": "CSS_animation-mode.md",
		"name": "animation-mode.md",
		"title": "css 动画保持最终状态",
		"description": "animation-fill-mode"
	},
	{
		"meta": "CSS",
		"path": "CSS_BFC.md",
		"name": "BFC.md",
		"title": "BFC",
		"description": "块格式化上下文（Block Formatting Context，BFC） 是 Web 页面的可视化 CSS 渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域"
	},
	{
		"meta": "CSS",
		"path": "CSS_box-model.md",
		"name": "box-model.md",
		"title": "CSS 盒模型",
		"description": "当对一个文档进行布局（lay out）的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）。"
	},
	{
		"meta": "CSS",
		"path": "CSS_css-border.md",
		"name": "css-border.md",
		"title": "你不知道的css边框",
		"description": "css边框的更多秘密"
	},
	{
		"meta": "CSS",
		"path": "CSS_css-elliptic.md",
		"name": "css-elliptic.md",
		"title": "css实现椭圆",
		"description": "对于border-radius，有一个鲜为人知的知识点：它可以单独指定水平和垂直半径，只要用一个斜杠（/）分隔开就可以。实现椭圆就要用到这一点。s"
	},
	{
		"meta": "CSS",
		"path": "CSS_css-parallelogram.md",
		"name": "css-parallelogram.md",
		"title": "css实现平行四边形",
		"description": "在使用简单的 skew()进行拉伸后，我们发现其容器的内容也发生了斜向变形，这是我们不希望看到的，解决这个问题的方法主要有嵌套元素法和伪元素法。s"
	},
	{
		"meta": "CSS",
		"path": "CSS_css-stripes.md",
		"name": "css-stripes.md",
		"title": "css条纹",
		"description": "实现方法：CSS 线性渐变"
	},
	{
		"meta": "CSS",
		"path": "CSS_flex-width.md",
		"name": "flex-width.md",
		"title": "flex布局",
		"description": "举个例子：左边元素定宽，右边元素占满余下部分"
	},
	{
		"meta": "CSS",
		"path": "CSS_float.md",
		"name": "float.md",
		"title": "关于浮动",
		"description": "浮动可以理解为让元素脱离标准文档流，漂浮于标准文档流之上，和标准文档流不在一个层次上"
	},
	{
		"meta": "CSS",
		"path": "CSS_important-not-work.md",
		"name": "important-not-work.md",
		"title": "css 中!important 无效的问题",
		"description": "css 中!important 无效的问题"
	},
	{
		"meta": "CSS",
		"path": "CSS_padding-overflow.md",
		"name": "padding-overflow.md",
		"title": null,
		"description": null
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_ajax.md",
		"name": "ajax.md",
		"title": "Ajax 原生实现",
		"description": "Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML）"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_async.md",
		"name": "async.md",
		"title": "JS 异步编程",
		"description": "异步任务就是当执行到某个耗时很长的任务时，后续任务不用等待异步任务执行完毕再执行，等到异步任务完成，浏览器再对异步任务作出响应，即异步任务不会阻塞后续任务。"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_call-apply.md",
		"name": "call-apply.md",
		"title": "call,apply",
		"description": "javascript中call和apply的应用场景及原理实现"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_closure.md",
		"name": "closure.md",
		"title": "闭包",
		"description": "函数与对其状态即词法环境（lexical environment）的引用共同构成闭包（closure）"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_debounceAndthrottle.md",
		"name": "debounceAndthrottle.md",
		"title": "防抖与节流",
		"description": "在前端开发中，有些事件会持续触发，如 scroll，resize 事件，如果不停地执行处理函数，则会大大地消耗浏览器性能。这时就需要防抖或函数来减少执行函数的频率。"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_error.md",
		"name": "error.md",
		"title": "Error 类型",
		"description": "javascript Error 类型"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_event-loop.md",
		"name": "event-loop.md",
		"title": "事件循环机制",
		"description": "Javascript 是单线程执行的，出现异步时，并不会阻塞 JS 的执行，而是接着往下执行，等到异步结果返回时再处理。对于这些异步的执行任务，就依靠 JS 的事件循环机制，即 EventLoop。"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_event.md",
		"name": "event.md",
		"title": "事件流",
		"description": "事件，就是文档或者浏览器与用户的交互瞬间。简单地说，就是当用户操作时，比如点击按钮，浏览器做出相应的回应。所谓事件流，就是页面中事件接收的顺序。目前，主要有两种事件流，事件冒泡流和事件捕获流。"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_hoisting.md",
		"name": "hoisting.md",
		"title": "变量提升",
		"description": "在 JavaScript 中，变量提升是很常见的现象."
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_import.md",
		"name": "import.md"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_JSON.md",
		"name": "JSON.md",
		"title": "JSON",
		"description": "JSON(Javascript Object Notation,Javascript 对象表示法),是 JavaScript 的一个严格的子集，利用了 JavaScript 中的一些模式来表示结构化数据结构。"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_JSX.md",
		"name": "JSX.md",
		"title": "JSX",
		"description": "JSX 是一种 JavaScript 的语法扩展，运用于 React 架构中，其格式比较像是模版语言，但事实上完全是在 JavaScript 内部实现的。"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_new.md",
		"name": "new.md",
		"title": "原生 JS 实现 new 方法",
		"description": "原生 JS 实现 new 方法"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_ObjectAndInherited.md",
		"name": "ObjectAndInherited.md",
		"title": "对象和继承",
		"description": "JavaScript 中对象的创建方式有以下几种..."
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_one-way-linked-list.md",
		"name": "one-way-linked-list.md",
		"title": "单向链表",
		"description": "单向链表（单链表）是链表的一种，其特点是链表的链接方向是单向的，对链表的访问要通过顺序读取从头部开始；链表是使用指针进行构造的列表"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_Promise(part-one).md",
		"name": "Promise(part-one).md",
		"title": "Promise(一)",
		"description": "在 JavaScript 中，所有代码都是单线程执行的。由于这个原因，很多情况下都需要异步操作。比如一些耗时的操作，无需等待操作完成，即可运行接下来的代码，等操作完成时执行相应的回调操作，ajax 就是典型的例子"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_promiseA+.md",
		"name": "promiseA+.md",
		"title": "根据Promises/A+规范实现Promise",
		"description": "promise构造器接收一个被称为执行器的函数，该函数会被传递两个函数作为参数，一个是成功时调用的函数resolve,一个是失败是调用的函数reject。"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_prototype.md",
		"name": "prototype.md",
		"title": "什么是原型",
		"description": "在声明了一个函数之后，浏览器会自动为这个函数创建一个对象，这个对象就是原型对象。每个函数都有一个`prototype`属性，该属性指向原型对象，这个原型对象中包含一个`constructor`属性，该属性指向函数本身。"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_queue.md",
		"name": "queue.md",
		"title": "队列",
		"description": "队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作（first in first out ,FIFO），和栈一样，队列是一种操作受限制的线性表。"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_scope.md",
		"name": "scope.md",
		"title": "作用域",
		"description": "官方解释作用域：‘一段程序代码中所用到的名字并不总是有效/可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。’"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_shallowAndDeep.md",
		"name": "shallowAndDeep.md",
		"title": "浅拷贝与深拷贝",
		"description": "JavaScript 中的数据类型主要分为原始数据类型（`Number，String，Boolean，Null，Undefined，Symbol`）和引用类型（`Object`）。深拷贝和浅拷贝主要是针对引用类型的，即在拷贝一个对象时，对于对象中属性值是对象的情况，浅拷贝复制的是对象的引用，深拷贝会复制对象的值。"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_simple-type.md",
		"name": "simple-type.md",
		"title": "javascript 原始类型",
		"description": "JavaScript 是一种弱类型或者说是动态类型的语言，即在使用过程中不需要事先定义变量的类型，程序在运行过程中会根据实际情况自行决定其类型。"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_stack.md",
		"name": "stack.md",
		"title": "什么是栈",
		"description": "栈（stack）又名堆栈，它是一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表。"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_this.md",
		"name": "this.md",
		"title": "this 指向什么",
		"description": "JavaScript 中，任何函数本质上是通过对象来调用的，如果没有直接指定，就是`window`对象"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_type.md",
		"name": "type.md",
		"title": "JS 中的类型转换",
		"description": "JS 中的类型转换"
	},
	{
		"meta": "JavaScript",
		"path": "JavaScript_vue-act.md",
		"name": "vue-act.md",
		"title": "简单实现 Vue 的响应式系统",
		"description": "Vue 的响应式系统是基于Object.defineProperty实现的，所以先来了解Object.defineProperty是非常有必要的。"
	},
	{
		"meta": "Others",
		"path": "Others_cache.md",
		"name": "cache.md",
		"title": "WEB 缓存",
		"description": "为什么要缓存"
	},
	{
		"meta": "Others",
		"path": "Others_global-style-in-component.md",
		"name": "global-style-in-component.md",
		"title": "组件应用全局样式",
		"description": "addGlobalClass"
	},
	{
		"meta": "Others",
		"path": "Others_HTTP-basic.md",
		"name": "HTTP-basic.md",
		"title": "HTTP 基本知识",
		"description": "网址，准确地说是 URL（Uniform Resource Locator，统一资源定位符）。"
	},
	{
		"meta": "Others",
		"path": "Others_image-layout.md",
		"name": "image-layout.md",
		"title": "HTML 中有关图片处理的几种情况",
		"description": "背景大图,图片在固定宽高的框中居中显示..."
	},
	{
		"meta": "Others",
		"path": "Others_image-preview.md",
		"name": "image-preview.md",
		"title": "前端实现图片预览",
		"description": "在选择图片文件后，能即时预览图片"
	},
	{
		"meta": "Others",
		"path": "Others_meta.md",
		"name": "meta.md",
		"title": "meta 标签的常见应用",
		"description": "meta 标签 HTML 语言 head 区域的一个辅助性标签，常用于定义页面的说明，关键字等元数据。"
	},
	{
		"meta": "Others",
		"path": "Others_svg.md",
		"name": "svg.md",
		"title": "SVG",
		"description": "可缩放矢量图形（Scalable Vector Graphics，SVG），是一种用于描述基于二维的矢量图形的，基于 XML 的标记语言。"
	},
	{
		"meta": "Others",
		"path": "Others_token-login.md",
		"name": "token-login.md",
		"title": "小程序登录",
		"description": "即先发起 wx.login 请求，得到 code 后经第三方服务器想微信服务器发送请求获取 openid，assessToken 等敏感信息，这里我们需要以 assessToken 作为登录状态保持的依据。"
	},
	{
		"meta": "Others",
		"path": "Others_var-in-css.md",
		"name": "var-in-css.md",
		"title": "wxss中运用css变量",
		"description": "--main-color:green;"
	},
	{
		"meta": "Others",
		"path": "Others_wxapp-router-params.md",
		"name": "wxapp-router-params.md",
		"title": "小程序路由参数",
		"description": "在页面 onLoad 时获取..."
	},
	{
		"meta": "Tools",
		"path": "Tools_Eslint&Prettier.md",
		"name": "Eslint&Prettier.md",
		"title": "代码规范和代码美化",
		"description": "Eslint+Prettier"
	},
	{
		"meta": "Tools",
		"path": "Tools_git-change-remote.md",
		"name": "git-change-remote.md",
		"title": "git 更换远程仓库",
		"description": "git remote origin set-url [url]"
	},
	{
		"meta": "Tools",
		"path": "Tools_Git-order.md",
		"name": "Git-order.md",
		"title": "git 命令",
		"description": "git 常用命令"
	},
	{
		"meta": "Tools",
		"path": "Tools_webpack-better.md",
		"name": "webpack-better.md",
		"title": "webpack 性能优化",
		"description": "webpack 性能优化"
	},
	{
		"meta": "Tools",
		"path": "Tools_webpack-dev.md",
		"name": "webpack-dev.md",
		"title": "webpack 入门",
		"description": "webpack 开发环境配置"
	},
	{
		"meta": "Tools",
		"path": "Tools_webpack-prod.md",
		"name": "webpack-prod.md",
		"title": "webpack 生产环境配置",
		"description": "webpack production"
	}
]