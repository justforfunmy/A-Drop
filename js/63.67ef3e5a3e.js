(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{231:function(e,s,n){const l=n(0);e.exports=function(e){Object.keys(e).forEach((function(s){this[s]=e[s]}));return l.createElement("section",{className:"markdown"},l.createElement("h1",null,"手写一个 webpack loader"),l.createElement("p",null,"loader 是 webpack 的重要组成部分，它是 webpack 能够将各种资源作为模块引入的关键。"),l.createElement("h2",null,"何为 loader"),l.createElement("p",null,"loader 可以说是将资源变成源代码的转换器，经过转化之后，你就可以在 js 中通过",l.createElement("code",{dangerouslySetInnerHTML:{__html:"import"}}),"引入。"),l.createElement("h2",null,"编写原则"),l.createElement("ul",null,l.createElement("li",null,l.createElement("p",null,"Simple：单一功能，维护更容易，支持链式调用")),l.createElement("li",null,l.createElement("p",null,"Chaining：链式调用")),l.createElement("li",null,l.createElement("p",null,"Modular：保证输出的模块化。输出就和普通的模块一样")),l.createElement("li",null,l.createElement("p",null,"StateLess：无状态。在转化资源的过程中不保留状态")),l.createElement("li",null,l.createElement("p",null,"Loader Utilities：善用 loader 工具包，主要是",l.createElement("code",{dangerouslySetInnerHTML:{__html:"loader-utils"}}),",",l.createElement("code",{dangerouslySetInnerHTML:{__html:"schema-utils"}}),"。可用于读取 loader 参数等")),l.createElement("li",null,l.createElement("p",null,"Loader Dependencies: 外部资源(比如从本地文件系统读取的 js)引入必须指出")),l.createElement("li",null,l.createElement("p",null,"Module Dependencies：使用合适的模块依赖解决方案，例如",l.createElement("code",{dangerouslySetInnerHTML:{__html:"require"}}),"方式")),l.createElement("li",null,l.createElement("p",null,"Common Code：提取公共代码")),l.createElement("li",null,l.createElement("p",null,"Absolute Paths：避免使用绝对路径")),l.createElement("li",null,l.createElement("p",null,"Peer Dependencies"))),l.createElement("p",null,"这里最主要的是前四条：单一功能，链式调用，模块化，无状态"),l.createElement("h2",null,"开始"),l.createElement("p",null,"我们知道，资源经过 loader 处理之后能够以模块的形式被 js 引用，因此 loader 的作用就是将不同形式的资源处理成一段通用的 js 可执行代码，执行的结果就是导出一个模块，因为运行在 node 端，用的是 commonjs 规范，比如",l.createElement("code",{dangerouslySetInnerHTML:{__html:"module.exports={...}"}})),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse</span>(<span class="hljs-params">source</span>) </span>{\n  <span class="hljs-comment">//...</span>\n  <span class="hljs-comment">//content表示处理之后的字符串</span>\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`module.exports=<span class="hljs-subst">${content}</span>`</span>;\n}\n'}})),l.createElement("ul",null,l.createElement("li",null,"解析 markdown 文件")),l.createElement("p",null,"这里用到",l.createElement("a",{href:"https://github.com/jxson/front-matter"},"front-matter"),"，读取 markdown 文件，并以 js 对象的形式返回"),l.createElement("p",null,"比如源文件是这样的："),l.createElement("pre",null,l.createElement("code",{className:"language-markdown",dangerouslySetInnerHTML:{__html:'---\ntitle: Just hack&#x27;n\n<span class="hljs-section">description: Nothing to see here\n---</span>\n\nThis is some text about some stuff that happened sometime ago\n'}})),l.createElement("p",null,"经过处理："),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'{\n    <span class="hljs-attr">attributes</span>: {\n        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Just hack&#x27;n&#x27;</span>,\n        <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;Nothing to see here&#x27;</span>\n    },\n    <span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;This is some text about some stuff that happened sometime ago&#x27;</span>,\n    <span class="hljs-attr">bodyBegin</span>: <span class="hljs-number">6</span>,\n    <span class="hljs-attr">frontmatter</span>: <span class="hljs-string">&#x27;title: Just hack&#x27;n\ndescription: Nothing to see here&#x27;</span>\n}\n'}})),l.createElement("p",null,"我们要处理的文本内容就是 body 的值"),l.createElement("p",null,"如果仅仅是处理成 html 字符串，导出",l.createElement("code",{dangerouslySetInnerHTML:{__html:"JSON.stringify(body)"}}),"即可。"),l.createElement("h2",null,"处理成 react component"),l.createElement("p",null,"处理成 react 组件要复杂一些，最后导出的可执行 js 中要包含引入 react 的代码，以及 jsx 要经过 babel 转义，因此需要引入",l.createElement("code",{dangerouslySetInnerHTML:{__html:"@babel/core"}}),"和",l.createElement("code",{dangerouslySetInnerHTML:{__html:"@babel/preset-react"}})),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> prependOutput = <span class="hljs-string">&quot;const React = require(&#x27;react&#x27;)&quot;</span>;\n\n<span class="hljs-comment">//对于代码块的处理</span>\n<span class="hljs-keyword">const</span> template = body\n  .replace(<span class="hljs-regexp">/&lt;code(s[^&gt;]+)&gt;(.+?)&lt;/code&gt;/g</span>s, <span class="hljs-string">&#x27;&lt;code$1 dangerouslySetInnerHTML={{ __html:`$2`}} /&gt;&#x27;</span>)\n  .replace(<span class="hljs-regexp">/&lt;code&gt;(.+?)&lt;/code&gt;/g</span>s, <span class="hljs-string">&#x27;&lt;code dangerouslySetInnerHTML={{ __html:`$1`}} /&gt;&#x27;</span>)\n  .replace(<span class="hljs-regexp">/&lt;(code|pre)([^s&gt;]*)sclass=([^&gt;]+)&gt;/g</span>, <span class="hljs-string">&#x27;&lt;$1$2 className=$3&gt;&#x27;</span>)\n  .replace(<span class="hljs-regexp">/&lt;img src=&quot;(.+?)&quot;/g</span>s, <span class="hljs-string">&#x27;&lt;img src={require(&quot;$1&quot;).default}&#x27;</span>)\n  <span class="hljs-comment">// 解决模版字符串输出异常问题</span>\n  .replace(<span class="hljs-regexp">/`/g</span>, <span class="hljs-string">&#x27;`&#x27;</span>)\n  .replace(<span class="hljs-regexp">/${/g</span>, <span class="hljs-string">&#x27;${&#x27;</span>)\n  .replace(<span class="hljs-regexp">/__html:`(.+?)`}} /&gt;/g</span>s, <span class="hljs-string">&#x27;__html:`$1`}} /&gt;&#x27;</span>);\n\n<span class="hljs-comment">// babel转译</span>\n<span class="hljs-keyword">const</span> compiled = babelCore.transformSync(<span class="hljs-string">&#x27;const markdown = &#x27;</span> + template, {\n  <span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;@babel/preset-react&#x27;</span>]\n});\n\n<span class="hljs-keyword">let</span> { code } = compiled;\ncode = code.replace(<span class="hljs-regexp">/`/g</span>, <span class="hljs-string">&#x27;\\`&#x27;</span>).replace(<span class="hljs-regexp">/${/g</span>, <span class="hljs-string">&#x27;\\$\\{&#x27;</span>);\n\n<span class="hljs-comment">//拼接函数</span>\n<span class="hljs-keyword">const</span> reactComponent = <span class="hljs-string">`\n      function (props) {\n        Object.keys(props).forEach(function (key) {\n          this[key] = props[key]\n        })\n        <span class="hljs-subst">${code}</span>\n        return markdown\n      }`</span>;\n\n<span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${prependOutput}</span>\nmodule.exports = <span class="hljs-subst">${reactComponent}</span>`</span>;\n'}})),l.createElement("h2",null,"loader options"),l.createElement("p",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"loader-utils"}}),"和",l.createElement("code",{dangerouslySetInnerHTML:{__html:"schema-utils"}}),"可以用来读入用户配置的 options 并验证其有效性"),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> options = loaderUtils.getOptions(<span class="hljs-built_in">this</span>);\nvalidateOptions(schema, options, {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;md-loader&#x27;</span>,\n  <span class="hljs-attr">baseDataPath</span>: <span class="hljs-string">&#x27;options&#x27;</span>\n});\n'}})))}}}]);
//# sourceMappingURL=63.67ef3e5a3e.js.map