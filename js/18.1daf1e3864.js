(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{152:function(e,t,n){const l=n(0);e.exports=function(e){Object.keys(e).forEach((function(t){this[t]=e[t]}));return l.createElement("section",{className:"markdown"},l.createElement("h1",null,"添加 Sass 样式表"),l.createElement("blockquote",null,l.createElement("p",null,"注意：此功能在",l.createElement("code",{dangerouslySetInnerHTML:{__html:"react-scripts@2.0.0"}}),"及更高版本中可用。")),l.createElement("p",null,"通常，我们建议您不要在不同组件之间重复使用相同的 CSS 类。例如，建议不要在",l.createElement("code",{dangerouslySetInnerHTML:{__html:"&lt;AcceptButton&gt;"}}),"和",l.createElement("code",{dangerouslySetInnerHTML:{__html:"&lt;RejectButton&gt;"}}),"组件中使用",l.createElement("code",{dangerouslySetInnerHTML:{__html:".Button"}})," CSS 类，而建议使用自己的.Button 样式创建一个",l.createElement("code",{dangerouslySetInnerHTML:{__html:"&lt;Button&gt;"}}),"组件，",l.createElement("code",{dangerouslySetInnerHTML:{__html:"&lt;AcceptButton&gt;"}}),"和",l.createElement("code",{dangerouslySetInnerHTML:{__html:"&lt;RejectButton&gt;"}}),"都可以呈现（但不是",l.createElement("a",{href:"https://reactjs.org/docs/composition-vs-inheritance.html"},"继承"),"）。"),l.createElement("p",null,"遵循此规则通常会使 CSS 预处理器的用处不大，因为诸如 mixins 和 nesting 之类的功能已被组件组合所取代。但是，如果发现 CSS 预处理程序很有价值，则可以对其进行集成。"),l.createElement("p",null,"要使用 Sass，请首先安装",l.createElement("code",{dangerouslySetInnerHTML:{__html:"node-sass"}}),"："),l.createElement("pre",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"$ npm install node-sass --save\n$ # or\n$ yarn add node-sass\n"}})),l.createElement("p",null,"现在，您可以将",l.createElement("code",{dangerouslySetInnerHTML:{__html:"src/App.css"}}),"重命名为",l.createElement("code",{dangerouslySetInnerHTML:{__html:"src/App.scss"}}),"，并更新",l.createElement("code",{dangerouslySetInnerHTML:{__html:"src/App.js"}}),"以导入",l.createElement("code",{dangerouslySetInnerHTML:{__html:"src/App.scss"}}),"。如果使用扩展名",l.createElement("code",{dangerouslySetInnerHTML:{__html:".scss"}}),"或",l.createElement("code",{dangerouslySetInnerHTML:{__html:".sass"}}),"导入，此文件和任何其他文件将自动编译。"),l.createElement("p",null,"要在 Sass 文件之间共享变量，可以使用 Sass 导入。例如，",l.createElement("code",{dangerouslySetInnerHTML:{__html:"src/App.scss"}}),"和其他组件样式文件可以包含",l.createElement("code",{dangerouslySetInnerHTML:{__html:"@import &quot;./shared.scss&quot;"}}),";具有变量定义。"),l.createElement("p",null,"这将使您可以像"),l.createElement("pre",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"@import 'styles/_colors.scss'; // assuming a styles directory under src/\n@import '~nprogress/nprogress'; // importing a css file from the nprogress node module\n"}})),l.createElement("blockquote",null,l.createElement("p",null,"注意：您必须在 ",l.createElement("code",{dangerouslySetInnerHTML:{__html:"node_modules"}})," 的导入之前添加",l.createElement("code",{dangerouslySetInnerHTML:{__html:"〜"}}),"，如上所示。")),l.createElement("p",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"node-sass"}}),"还支持",l.createElement("code",{dangerouslySetInnerHTML:{__html:"SASS_PATH"}}),"变量。"),l.createElement("p",null,"要使用相对于您指定的路径的导入，以及从",l.createElement("code",{dangerouslySetInnerHTML:{__html:"node_modules"}}),"使用导入而不添加",l.createElement("code",{dangerouslySetInnerHTML:{__html:"〜"}}),"前缀，您可以在项目根目录添加一个",l.createElement("code",{dangerouslySetInnerHTML:{__html:".env"}}),"文件，其变量为",l.createElement("code",{dangerouslySetInnerHTML:{__html:"SASS_PATH = node_modules：src"}}),"。要指定更多目录，可以将它们添加到以：分隔的",l.createElement("code",{dangerouslySetInnerHTML:{__html:"SASS_PATH"}}),"中，例如",l.createElement("code",{dangerouslySetInnerHTML:{__html:"path1：path2：path3"}})),l.createElement("p",null,"如果您设置",l.createElement("code",{dangerouslySetInnerHTML:{__html:"SASS_PATH = node_modules：src"}}),"，这将使您可以像"),l.createElement("pre",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"@import 'styles/colors'; // assuming a styles directory under src/, where _colors.scss partial file exists.\n@import 'nprogress/nprogress'; // importing a css file from the nprogress node module\n"}})),l.createElement("blockquote",null,l.createElement("p",null,"注意：对于 Windows 操作系统，请使用以下语法")),l.createElement("pre",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"SASS_PATH=./node_modules;./src\n"}})),l.createElement("blockquote",null,l.createElement("p",null,"提示：您也可以选择将此功能与 CSS 模块一起使用！")),l.createElement("p",null,"注意：如果使用的是 Flow，请在",l.createElement("code",{dangerouslySetInnerHTML:{__html:".flowconfig"}}),"中覆盖",l.createElement("code",{dangerouslySetInnerHTML:{__html:"module.file_ext"}}),"设置，以便它可以识别",l.createElement("code",{dangerouslySetInnerHTML:{__html:".sass"}}),"或",l.createElement("code",{dangerouslySetInnerHTML:{__html:".scss"}}),"文件。您还需要包括",l.createElement("code",{dangerouslySetInnerHTML:{__html:".js"}}),"，",l.createElement("code",{dangerouslySetInnerHTML:{__html:".jsx"}}),"，",l.createElement("code",{dangerouslySetInnerHTML:{__html:".mjs"}})," 和",l.createElement("code",{dangerouslySetInnerHTML:{__html:".json"}}),"文件的 ",l.createElement("code",{dangerouslySetInnerHTML:{__html:"module.file_ext"}})," 默认设置。"),l.createElement("pre",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"[options]\nmodule.file_ext=.js\nmodule.file_ext=.jsx\nmodule.file_ext=.mjs\nmodule.file_ext=.json\nmodule.file_ext=.sass\nmodule.file_ext=.scss\n"}})))}}}]);
//# sourceMappingURL=18.1daf1e3864.js.map