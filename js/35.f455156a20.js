(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{195:function(s,n,a){const e=a(0);s.exports=function(s){Object.keys(s).forEach((function(n){this[n]=s[n]}));return e.createElement("section",{className:"markdown"},e.createElement("h1",null,"diff"),e.createElement("p",null,"diff 算法的基本原则是同层对比真实 dom 和新的虚拟 dom，先对比类型，如果类型相同，则对比属性，不同属性则更新属性，如果类型不同，则组件重新创建。"),e.createElement("h2",null,"对比节点"),e.createElement("pre",null,e.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-comment">/**\n *\n * <span class="hljs-doctag">@param <span class="hljs-type">{HTMLElement}</span> </span>dom 真实dom\n * <span class="hljs-doctag">@param <span class="hljs-type">{vnode}</span> </span>vnode 新的虚拟dom\n * <span class="hljs-doctag">@returns <span class="hljs-type">{HTMLElement}</span> </span>新的真实dom\n */</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">diffNode</span>(<span class="hljs-params">dom, vnode</span>) </span>{}\n'}})),e.createElement("p",null,"其中在 react 中 vnode 的可以分成以下三种情况："),e.createElement("ol",null,e.createElement("li",null,"文本节点")),e.createElement("p",null,"如果真实 dom 中节点类型为文本节点（nodeType 为 3）,则对比其内容，不同则更新，如果真实 dom 不是文本节点，则创建文本节点并完全替换掉："),e.createElement("pre",null,e.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">let</span> out = dom;\n<span class="hljs-comment">//数值转换成字符串</span>\n<span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> vnode === <span class="hljs-string">&#x27;number&#x27;</span>) vnode = <span class="hljs-built_in">String</span>(vnode);\n<span class="hljs-comment">// 对于虚拟dom是字符</span>\n<span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> vnode === <span class="hljs-string">&#x27;string&#x27;</span>) {\n  <span class="hljs-comment">// 如果当前的DOM就是文本节点，则直接更新内容</span>\n  <span class="hljs-keyword">if</span> (dom &amp;&amp; dom.nodeType === <span class="hljs-number">3</span>) {\n    <span class="hljs-keyword">if</span> (dom.textContent !== vnode) {\n      dom.textContent = vnode;\n    }\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-comment">// 如果DOM不是文本节点，则新建一个文本节点DOM，并移除掉原来的</span>\n    out = <span class="hljs-built_in">document</span>.createTextNode(vnode);\n    <span class="hljs-keyword">if</span> (dom &amp;&amp; dom.parentNode) {\n      dom.parentNode.replaceChild(out, dom);\n    }\n  }\n  <span class="hljs-keyword">return</span> out;\n}\n'}})),e.createElement("ol",{start:"2"},e.createElement("li",null,"组件类型")),e.createElement("p",null,"组件类型单独处理"),e.createElement("pre",null,e.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-comment">// 如果虚拟dom是函数组件或者类组件</span>\n<span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> vnode.type === <span class="hljs-string">&#x27;function&#x27;</span>) {\n  <span class="hljs-keyword">return</span> diffComponent(out, vnode);\n}\n'}})),e.createElement("ol",{start:"3"},e.createElement("li",null,"dom 标签")),e.createElement("p",null,"如果真实 dom 不存在，则创建 dom 元素，如果存在，则继续比对其子元素和 dom 属性"),e.createElement("pre",null,e.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">if</span> ((vnode.props &amp;&amp; vnode.props.children) || out.childNodes.length &gt; <span class="hljs-number">0</span>) {\n  diffChildren(out, vnode.props.children);\n}\n\ndiffAttribute(out, vnode);\n'}})),e.createElement("h2",null,"diffChildren"),e.createElement("p",null,"子组件的比对需要区分是否有 key 值，将有 key 值的和没 key 值的分开处理："),e.createElement("pre",null,e.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> domChildren = dom.childNodes;\n<span class="hljs-keyword">const</span> children = [];\n<span class="hljs-keyword">const</span> keyed = {};\n<span class="hljs-comment">// 把有key 的dom 跟没有key 的dom 区分开</span>\n<span class="hljs-keyword">if</span> (domChildren &amp;&amp; domChildren.length &gt; <span class="hljs-number">0</span>) {\n  domChildren.forEach(<span class="hljs-function">(<span class="hljs-params">domChild</span>) =&gt;</span> {\n    <span class="hljs-keyword">const</span> key = domChild.getAttribute &amp;&amp; domChild.getAttribute(<span class="hljs-string">&#x27;key&#x27;</span>);\n    <span class="hljs-keyword">if</span> (key) keyed[key] = domChild;\n    <span class="hljs-keyword">else</span> children.push(domChild);\n  });\n}\n'}})),e.createElement("p",null,"然后遍历所有虚拟 dom，"),e.createElement("ol",null,e.createElement("li",null,"有 key")),e.createElement("p",null,"当比对时，直接找到对应 key 值的真实 dom 元素，比对生成新的 dom，并处理"),e.createElement("ol",{start:"2"},e.createElement("li",null,"没有 key")),e.createElement("p",null,"在没有 key 的真实 dom 列表中从 0 开始取，并比对"),e.createElement("pre",null,e.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Array</span>.isArray(vChildren)) {\n  vChildren = [vChildren];\n}\n\n<span class="hljs-keyword">if</span> (vChildren &amp;&amp; vChildren.length &gt; <span class="hljs-number">0</span>) {\n  <span class="hljs-keyword">let</span> min = <span class="hljs-number">0</span>;\n  <span class="hljs-keyword">let</span> childrenLen = children.length;\n  vChildren.forEach(<span class="hljs-function">(<span class="hljs-params">vChild, i</span>) =&gt;</span> {\n    <span class="hljs-keyword">let</span> child;\n    <span class="hljs-keyword">const</span> { key } = vChild;\n    <span class="hljs-keyword">if</span> (key) {\n      <span class="hljs-keyword">if</span> (keyed[key]) {\n        child = keyed[key];\n        keyed[key] = <span class="hljs-literal">undefined</span>;\n      }\n    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (childrenLen &gt; min) {\n      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = min; j &lt; childrenLen; j++) {\n        <span class="hljs-keyword">const</span> c = children[j];\n        <span class="hljs-keyword">if</span> (c) {\n          child = c;\n          children[j] = <span class="hljs-literal">undefined</span>;\n          <span class="hljs-keyword">if</span> (j === childrenLen - <span class="hljs-number">1</span>) childrenLen--;\n          <span class="hljs-keyword">if</span> (j === min) min++;\n          <span class="hljs-keyword">break</span>;\n        }\n      }\n    }\n\n    <span class="hljs-comment">// 对比</span>\n    child = diff(child, vChild);\n\n    <span class="hljs-comment">// 更新DOM</span>\n    <span class="hljs-keyword">const</span> f = domChildren[i];\n    <span class="hljs-keyword">if</span> (child &amp;&amp; child !== dom &amp;&amp; child !== f) {\n      <span class="hljs-comment">// 如果更新前的对应位置为空，说明此节点是新增的</span>\n      <span class="hljs-keyword">if</span> (!f) {\n        dom.appendChild(child);\n        <span class="hljs-comment">// 如果更新后的节点和更新前对应位置的下一个节点一样，说明当前位置的节点被移除了</span>\n      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (child === f.nextSibling) {\n        removeNode(f);\n        <span class="hljs-comment">// 将更新后的节点移动到正确的位置</span>\n      } <span class="hljs-keyword">else</span> {\n        <span class="hljs-comment">// 注意insertBefore的用法，第一个参数是要插入的节点，第二个参数是已存在的节点</span>\n        dom.insertBefore(child, f);\n      }\n    }\n  });\n}\n'}})),e.createElement("h2",null,"diffAttribute"),e.createElement("p",null,"对比属性,老属性不在新属性中，移除老的属性；属性值不一致，则覆盖"),e.createElement("pre",null,e.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">diffAttribute</span>(<span class="hljs-params">dom, vnode</span>) </span>{\n  <span class="hljs-comment">// dom原来的节点，vnode虚拟的节点</span>\n  <span class="hljs-keyword">const</span> oldAttris = {};\n  <span class="hljs-keyword">const</span> newAttris = vnode.props;\n  <span class="hljs-keyword">const</span> domAttrs = dom.attributes;\n  [...domAttrs].forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> {\n    oldAttris[item.name] = item.value;\n  });\n  <span class="hljs-comment">// 对比属性,老属性不在新属性中，移除老的属性</span>\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> oldAttris) {\n    <span class="hljs-keyword">if</span> (!(key <span class="hljs-keyword">in</span> newAttris)) {\n      setArribute(dom, key, <span class="hljs-literal">undefined</span>);\n    }\n  }\n  <span class="hljs-comment">// 属性不一致，重置属性</span>\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> newAttris) {\n    <span class="hljs-keyword">if</span> (oldAttris[key] !== newAttris[key] &amp;&amp; key !== <span class="hljs-string">&#x27;children&#x27;</span>) {\n      setArribute(dom, key, newAttris[key]);\n    }\n  }\n}\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setArribute</span>(<span class="hljs-params">dom, key, value</span>) </span>{\n  <span class="hljs-comment">// class</span>\n  <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;className&#x27;</span>) {\n    key = <span class="hljs-string">&#x27;class&#x27;</span>;\n  }\n  <span class="hljs-comment">// 事件</span>\n  <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/onw+/</span>.test(key)) {\n    key = key.toLowerCase();\n    dom[key] = value || <span class="hljs-string">&#x27;&#x27;</span>;\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;style&#x27;</span>) {\n    <span class="hljs-comment">// 样式</span>\n    <span class="hljs-keyword">if</span> (!value || <span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&#x27;string&#x27;</span>) {\n      dom.style.cssText = value || <span class="hljs-string">&#x27;&#x27;</span>;\n    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &amp;&amp; <span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&#x27;object&#x27;</span>) {\n      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> k <span class="hljs-keyword">in</span> value) {\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value[k] === <span class="hljs-string">&#x27;number&#x27;</span>) {\n          dom.style[k] = <span class="hljs-string">`<span class="hljs-subst">${value[k]}</span>px`</span>;\n        } <span class="hljs-keyword">else</span> {\n          dom.style[k] = value[k];\n        }\n      }\n    }\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> dom) {\n      dom[key] = value;\n    }\n    <span class="hljs-keyword">if</span> (value) {\n      dom.setAttribute(key, value);\n    } <span class="hljs-keyword">else</span> {\n      dom.removeAttribute(key);\n    }\n  }\n}\n'}})),e.createElement("h2",null,"diffComponent"),e.createElement("p",null,"组件对比，类型对比主要是看构造函数是否一致.不一致则移除重新创建，一致则对比组件属性"),e.createElement("pre",null,e.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">diffComponent</span>(<span class="hljs-params">dom, vnode</span>) </span>{\n  <span class="hljs-keyword">let</span> c = dom &amp;&amp; dom._component;\n  <span class="hljs-keyword">let</span> oldDom = dom;\n\n  <span class="hljs-comment">// 如果组件类型没有变化，则重新set props</span>\n  <span class="hljs-keyword">if</span> (c &amp;&amp; c.constructor === vnode.type) {\n    setComponentProps(c, vnode.props);\n    dom = c.base;\n    <span class="hljs-comment">// 如果组件类型变化，则移除掉原来组件，并渲染新的组件</span>\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-keyword">if</span> (c) {\n      unmountComponent(c);\n      oldDom = <span class="hljs-literal">null</span>;\n    }\n\n    c = createComponent(vnode.type, vnode.props);\n\n    setComponentProps(c, vnode.props);\n    dom = c.base;\n\n    <span class="hljs-keyword">if</span> (oldDom &amp;&amp; dom !== oldDom) {\n      oldDom._component = <span class="hljs-literal">null</span>;\n      removeNode(oldDom);\n    }\n  }\n\n  <span class="hljs-keyword">return</span> dom;\n}\n\n<span class="hljs-comment">// 创建组件</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createComponent</span>(<span class="hljs-params">component, props</span>) </span>{\n  <span class="hljs-keyword">let</span> inst;\n  <span class="hljs-comment">// 如果是类定义组件，则直接返回实例</span>\n  <span class="hljs-keyword">if</span> (component.prototype &amp;&amp; component.prototype.render) {\n    inst = <span class="hljs-keyword">new</span> component(props);\n    <span class="hljs-comment">// 如果是函数定义组件，则将其扩展为类定义组件</span>\n  } <span class="hljs-keyword">else</span> {\n    inst = <span class="hljs-keyword">new</span> Component(props);\n    inst.constructor = component;\n    inst.render = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.constructor(props);\n    };\n  }\n\n  <span class="hljs-keyword">return</span> inst;\n}\n\n<span class="hljs-comment">// set props</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setComponentProps</span>(<span class="hljs-params">component, props</span>) </span>{\n  <span class="hljs-keyword">if</span> (!component.base) {\n    <span class="hljs-keyword">if</span> (component.componentWillMount) component.componentWillMount();\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (component.componentWillReceiveProps) {\n    component.componentWillReceiveProps(props);\n  }\n\n  component.props = props;\n\n  renderComponent(component);\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderComponent</span>(<span class="hljs-params">component</span>) </span>{\n  <span class="hljs-keyword">let</span> base;\n\n  <span class="hljs-keyword">const</span> renderer = component.render();\n\n  <span class="hljs-keyword">if</span> (component.base &amp;&amp; component.componentWillUpdate) {\n    component.componentWillUpdate();\n  }\n\n  base = diff(component.base, renderer);\n\n  <span class="hljs-keyword">if</span> (component.base) {\n    <span class="hljs-keyword">if</span> (component.componentDidUpdate) component.componentDidUpdate();\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (component.componentDidMount) {\n    component.componentDidMount();\n  }\n  component.base = base;\n  base._component = component;\n}\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unmountComponent</span>(<span class="hljs-params">comp</span>) </span>{\n  removeNode(comp.base);\n}\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">removeNode</span>(<span class="hljs-params">dom</span>) </span>{\n  <span class="hljs-keyword">if</span> (dom &amp;&amp; dom.parentNode) {\n    dom.parentNode.removeNode(dom);\n  }\n}\n'}})),e.createElement("h2",null,"修改 render 函数,setState"),e.createElement("pre",null,e.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params">vnode, container, callback</span>) </span>{\n  diff(<span class="hljs-literal">null</span>, vnode, container);\n}\n'}})),e.createElement("pre",null,e.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'setState(state, callback) {\n\t<span class="hljs-built_in">this</span>.state = {\n\t\t...this.state,\n\t\t...state\n\t};\n\trenderComponent(<span class="hljs-built_in">this</span>);\n}\n'}})))}}}]);
//# sourceMappingURL=35.f455156a20.js.map