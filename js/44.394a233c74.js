(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{194:function(s,a,n){const l=n(0);s.exports=function(s){Object.keys(s).forEach((function(a){this[a]=s[a]}));return l.createElement("section",{className:"markdown"},l.createElement("h1",null,"前端实现图片预览"),l.createElement("p",null,"需求：在选择图片文件后，能即时预览图片"),l.createElement("p",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"html"}}),"结构："),l.createElement("pre",null,l.createElement("code",{className:"language-html",dangerouslySetInnerHTML:{__html:'<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">\n      <span class="hljs-selector-class">.container</span> {\n        <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;\n        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;\n        <span class="hljs-attribute">display</span>: flex;\n        <span class="hljs-attribute">justify-content</span>: center;\n        <span class="hljs-attribute">align-items</span>: center;\n        <span class="hljs-attribute">flex-direction</span>: column;\n      }\n\n      <span class="hljs-selector-class">.img-wrapper</span> {\n        <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;\n        <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;\n        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid lightblue;\n        <span class="hljs-attribute">padding</span>: <span class="hljs-number">30px</span>;\n        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;\n        <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">30px</span>;\n      }\n\n      <span class="hljs-selector-class">.img-wrapper</span> <span class="hljs-selector-tag">img</span> {\n        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;\n        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;\n        <span class="hljs-attribute">object-fit</span>: scale-down;\n      }\n    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-wrapper&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片预览&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;preview&quot;</span> /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;image/jpg,image/jpeg,image/png&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fileInput&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>\n'}})),l.createElement("ul",null,l.createElement("li",null,"利用",l.createElement("code",{dangerouslySetInnerHTML:{__html:"URL.createObjectURL"}}),"实现")),l.createElement("p",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"URL.createObjectURL()"}})," 静态方法会创建一个 ",l.createElement("code",{dangerouslySetInnerHTML:{__html:"DOMString"}}),"，其中包含一个表示参数中给出的对象的",l.createElement("code",{dangerouslySetInnerHTML:{__html:"URL"}}),"。这个 ",l.createElement("code",{dangerouslySetInnerHTML:{__html:"URL"}})," 的生命周期和创建它的窗口中的 document 绑定。这个新的",l.createElement("code",{dangerouslySetInnerHTML:{__html:"URL"}})," 对象表示指定的 ",l.createElement("code",{dangerouslySetInnerHTML:{__html:"File"}})," 对象或 ",l.createElement("code",{dangerouslySetInnerHTML:{__html:"Blob"}})," 对象。"),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> fileInput = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;fileInput&#x27;</span>);\n<span class="hljs-keyword">const</span> preview = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;preview&#x27;</span>);\nfileInput.addEventListener(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{\n  <span class="hljs-keyword">const</span> file = <span class="hljs-built_in">this</span>.files[<span class="hljs-number">0</span>];\n  preview.src = file ? URL.createObjectURL(file) : <span class="hljs-string">&#x27;&#x27;</span>;\n});\n'}})),l.createElement("ul",null,l.createElement("li",null,"利用",l.createElement("code",{dangerouslySetInnerHTML:{__html:"fileReader"}}),"实现")),l.createElement("p",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"FileReader"}})," 对象允许 Web 应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 ",l.createElement("code",{dangerouslySetInnerHTML:{__html:"File"}})," 或 ",l.createElement("code",{dangerouslySetInnerHTML:{__html:"Blob"}})," 对象指定要读取的文件或数据。"),l.createElement("p",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"FileReader.result"}}),":文件的内容。该属性仅在读取操作完成后才有效，数据的格式取决于使用哪个方法来启动读取操作。"),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> fileInput = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;fileInput&#x27;</span>);\n<span class="hljs-keyword">const</span> preview = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;preview&#x27;</span>);\nfileInput.addEventListener(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{\n  <span class="hljs-keyword">const</span> file = <span class="hljs-built_in">this</span>.files[<span class="hljs-number">0</span>];\n  <span class="hljs-keyword">const</span> reader = <span class="hljs-keyword">new</span> FileReader();\n  reader.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {\n    preview.src = reader.result;\n  });\n  <span class="hljs-keyword">if</span> (file) {\n    reader.readAsDataURL(file);\n  }\n});\n'}})))}}}]);