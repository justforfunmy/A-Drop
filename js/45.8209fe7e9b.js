(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{194:function(e,n,l){const s=l(0);e.exports=function(e){Object.keys(e).forEach((function(n){this[n]=e[n]}));return s.createElement("section",{className:"markdown"},s.createElement("h1",null,"什么是原型"),s.createElement("p",null,"在声明了一个函数之后，浏览器会自动为这个函数创建一个对象，这个对象就是原型对象。每个函数都有一个",s.createElement("code",{dangerouslySetInnerHTML:{__html:"prototype"}}),"属性，该属性指向原型对象，这个原型对象中包含一个",s.createElement("code",{dangerouslySetInnerHTML:{__html:"constructor"}}),"属性，该属性指向函数本身。"),s.createElement("pre",null,s.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;king&#x27;</span>;\n}\n<span class="hljs-keyword">let</span> foo = <span class="hljs-keyword">new</span> Foo();\n<span class="hljs-built_in">console</span>.log(Foo.prototype.constructor === Foo); <span class="hljs-comment">//true</span>\n'}})),s.createElement("p",null,"在给函数原型对象添加属性或者方法之后，实例对象会自动拥有其属性或者方法"),s.createElement("pre",null,s.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'Foo.prototype.hi = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>);\n};\nfoo.hi(); <span class="hljs-comment">//hi</span>\n'}})),s.createElement("h2",null,"显式原型和隐式原型"),s.createElement("ul",null,s.createElement("li",null,"每个函数对象都有",s.createElement("code",{dangerouslySetInnerHTML:{__html:"prototype"}}),"属性，其指向显式原型属性"),s.createElement("li",null,"每个实例对象都有",s.createElement("code",{dangerouslySetInnerHTML:{__html:"__proto__"}}),"属性，其指向隐式原型属性"),s.createElement("li",null,"关系：",s.createElement("strong",null,"构造函数的显式原型的值等于实例对象隐式原型的值"),"，即",s.createElement("code",{dangerouslySetInnerHTML:{__html:"Foo.prototype===foo.__proto__"}}))),s.createElement("h2",null,"原型链"),s.createElement("ul",null,s.createElement("li",null,"在访问对象属性（方法）时：")),s.createElement("ol",null,s.createElement("li",null,"先在对象本身属性中找，找到返回"),s.createElement("li",null,"如果找不到，再沿着",s.createElement("code",{dangerouslySetInnerHTML:{__html:"__proto__"}}),"属性链向上查找，找到返回"),s.createElement("li",null,"最终没有找到，返回",s.createElement("code",{dangerouslySetInnerHTML:{__html:"undefined"}}))),s.createElement("ul",null,s.createElement("li",null,"在设置对象属性时，不会查找原型链，如果本身有该属性，就更改值，如果没有，添加属性并赋值")),s.createElement("pre",null,s.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'Foo.prototype.age = <span class="hljs-number">10</span>;\n<span class="hljs-built_in">console</span>.log(foo.name, foo.age, foo.color); <span class="hljs-comment">//king,10,undefined</span>\nfoo.age = <span class="hljs-number">12</span>;\n<span class="hljs-built_in">console</span>.log(Foo.prototype.age, foo.age); <span class="hljs-comment">//10,12  ,原型对象中age属性值不变</span>\n'}})),s.createElement("h2",null,"图解原型链"),s.createElement("p",null,s.createElement("img",{src:"./media/md/prototype-chain.png",alt:"原型链图解.png"}),"其中 0xxxx 为内存地址值，左侧为栈内存，右侧为堆内存"))}}}]);
//# sourceMappingURL=45.8209fe7e9b.js.map