(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{195:function(e,n,s){const l=s(0);e.exports=function(e){Object.keys(e).forEach((function(n){this[n]=e[n]}));return l.createElement("section",{className:"markdown"},l.createElement("h1",null,"javascript 原始类型"),l.createElement("p",null,"这一节简要梳理一下 JavaScript 中的数据类型和基本用法。JavaScript 是一种弱类型或者说是动态类型的语言，即在使用过程中不需要事先定义变量的类型，程序在运行过程中会根据实际情况自行决定其类型。"),l.createElement("h2",null,"数据类型"),l.createElement("p",null,"根据最新的 ECMAscript 标准，一共分 8 中类型："),l.createElement("ul",null,l.createElement("li",null,"7 种原始数据类型 1.Number 2.String 3.Boolean 4.Symbol 5.Null 6.Undefined 7.BigInt"),l.createElement("li",null,"1 种引用数据类型 1.Object")),l.createElement("h2",null,"使用 typeof 判断类型"),l.createElement("p",null,"typeof 返回的是数据类型的字符串表达"),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">typeof</span> <span class="hljs-number">3</span>; <span class="hljs-comment">//&quot;number&quot;</span>\n<span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;3&#x27;</span>; <span class="hljs-comment">//&quot;string&quot;</span>\n<span class="hljs-keyword">typeof</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//&quot;boolean&quot;</span>\n<span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">//&quot;object&quot;</span>\n<span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>; <span class="hljs-comment">//&quot;undefined&quot;</span>\n<span class="hljs-keyword">typeof</span> {}; <span class="hljs-comment">// &quot;object&quot;</span>\n<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Symbol</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">//&quot;symbol&quot;</span>\n<span class="hljs-keyword">typeof</span> <span class="hljs-number">10n</span>; <span class="hljs-comment">//&quot;bigint&quot;</span>\n'}})),l.createElement("h2",null,"注意"),l.createElement("ul",null,l.createElement("li",null,"尽管",l.createElement("code",{dangerouslySetInnerHTML:{__html:"typeof null === 'object'"}})," 返回 true，但这其实是一个公认的 bug，",l.createElement("code",{dangerouslySetInnerHTML:{__html:"null"}})," 是基本数据类型。"),l.createElement("li",null,"数据类型的字符串表达首字母小写 +BigInt 是 ES10 新特性，表示任意精度整数，以后的文章会有讲解")))}}}]);
//# sourceMappingURL=50.f7dd99fccb.js.map