(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{204:function(s,a,n){const l=n(0);s.exports=function(s){Object.keys(s).forEach((function(a){this[a]=s[a]}));return l.createElement("section",{className:"markdown"},l.createElement("h1",null,"React 实现提取图片像素颜色值"),l.createElement("p",null,"本文主要采用 canvas 的 getImageData() API 来实现对图片像素点颜色值的提取"),l.createElement("h2",null,"初始化画布"),l.createElement("p",null,"因为画布需要直接操作 dom 对象，所以需要使用 Ref 来获取目标 dom 对象"),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">import</span> React, { useEffect, useState } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.scss&#x27;</span>;\n\n<span class="hljs-keyword">const</span> CANVAS_WIDTH = <span class="hljs-number">800</span>;\n<span class="hljs-keyword">const</span> CANVAS_HEIGHT = <span class="hljs-number">600</span>;\n\n<span class="hljs-keyword">const</span> ChooseImage = <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-keyword">const</span> canvasRef = React.createRef();\n  <span class="hljs-keyword">const</span> [ctx, setCtx] = useState(<span class="hljs-literal">null</span>);\n  <span class="hljs-keyword">const</span> [canvas, setCanvas] = useState(<span class="hljs-literal">null</span>);\n\n  <span class="hljs-keyword">const</span> initCanvas = <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">const</span> cas = canvasRef.current;\n    <span class="hljs-comment">//画布（实际可绘画的区域）的宽高和canvas标签的宽高一致</span>\n    cas.width = CANVAS_WIDTH;\n    cas.height = CANVAS_HEIGHT;\n    setCanvas(cas);\n    <span class="hljs-keyword">if</span> (cas.getContext) {\n      <span class="hljs-keyword">const</span> context = cas.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>);\n      setCtx(context);\n    }\n  };\n\n  useEffect(<span class="hljs-function">() =&gt;</span> {\n    initCanvas();\n  }, []);\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span>\n        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;canvas&quot;</span>\n        <span class="hljs-attr">ref</span>=<span class="hljs-string">{canvasRef}</span>\n        <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">width:</span> `${<span class="hljs-attr">CANVAS_WIDTH</span>}<span class="hljs-attr">px</span>`, <span class="hljs-attr">height:</span> `${<span class="hljs-attr">CANVAS_HEIGHT</span>}<span class="hljs-attr">px</span>` }}\n      /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ChooseImage;\n'}})),l.createElement("h2",null,"选择图片"),l.createElement("p",null,"添加 input 标签，type 为 file,并限制文件类型为图片"),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> ChooseImage = <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-comment">//...</span>\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">input</span>\n        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>\n        <span class="hljs-attr">onChange</span>=<span class="hljs-string">{handleChange}</span>\n        <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;image/png,image/jpg,image/gif,image/jpeg&quot;</span>\n      /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span>\n        <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;canvas&quot;</span>\n        <span class="hljs-attr">ref</span>=<span class="hljs-string">{canvasRef}</span>\n        <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">width:</span> `${<span class="hljs-attr">CANVAS_WIDTH</span>}<span class="hljs-attr">px</span>`, <span class="hljs-attr">height:</span> `${<span class="hljs-attr">CANVAS_HEIGHT</span>}<span class="hljs-attr">px</span>` }}\n      /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  );\n};\n'}})),l.createElement("p",null,"接下来就是",l.createElement("code",{dangerouslySetInnerHTML:{__html:"handleChange"}}),"函数，就是选择完图片后要绘制到画布上"),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> CANVAS_WIDTH = <span class="hljs-number">800</span>;\n<span class="hljs-keyword">const</span> CANVAS_HEIGHT = <span class="hljs-number">600</span>;\n<span class="hljs-keyword">const</span> SX = <span class="hljs-number">0</span>;\n<span class="hljs-keyword">const</span> SY = <span class="hljs-number">0</span>;\n\n<span class="hljs-keyword">const</span> handleChange = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {\n  <span class="hljs-comment">//每次选择图片时清空画布</span>\n  ctx.clearRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, CANVAS_WIDTH, CANVAS_HEIGHT);\n  <span class="hljs-comment">//获得图片文件</span>\n  <span class="hljs-keyword">const</span> file = e.target.files[<span class="hljs-number">0</span>];\n  <span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> Image();\n  <span class="hljs-comment">//创建文件来源</span>\n  img.src = URL.createObjectURL(file);\n  img.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">l</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">const</span> { naturalWidth, naturalHeight } = img;\n    <span class="hljs-keyword">let</span> dx;\n    <span class="hljs-keyword">let</span> dy;\n    <span class="hljs-keyword">let</span> dWidth;\n    <span class="hljs-keyword">let</span> dHeight;\n    <span class="hljs-comment">//绘制图片到画布中央</span>\n    <span class="hljs-keyword">if</span> (naturalWidth &gt; naturalHeight) {\n      dWidth = CANVAS_WIDTH;\n      dHeight = (naturalHeight * CANVAS_WIDTH) / naturalWidth;\n      dy = (CANVAS_HEIGHT - dHeight) / <span class="hljs-number">2</span>;\n      dx = <span class="hljs-number">0</span>;\n    } <span class="hljs-keyword">else</span> {\n      dWidth = (naturalWidth * CANVAS_HEIGHT) / naturalHeight;\n      dHeight = CANVAS_HEIGHT;\n      dy = <span class="hljs-number">0</span>;\n      dx = (CANVAS_WIDTH - dWidth) / <span class="hljs-number">2</span>;\n    }\n    ctx.drawImage(img, SX, SY, naturalWidth, naturalHeight, dx, dy, dWidth, dHeight);\n  };\n};\n'}})),l.createElement("h2",null,"点选像素"),l.createElement("p",null,"首先为 canvas 添加监听事件"),l.createElement("pre",null,l.createElement("code",{className:"language-html",dangerouslySetInnerHTML:{__html:'<span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&quot;{handlePix}&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span>\n'}})),l.createElement("p",null,"然后编写监听函数"),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> handlePix = <span class="hljs-function">(<span class="hljs-params">evt</span>) =&gt;</span> {\n  <span class="hljs-keyword">let</span> x = evt.clientX;\n  <span class="hljs-keyword">let</span> y = evt.clientY;\n  <span class="hljs-keyword">const</span> rect = canvas.getBoundingClientRect();\n  x -= rect.left;\n  y -= rect.top;\n  <span class="hljs-keyword">const</span> colorData = ctx.getImageData(x, y, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);\n};\n'}})))}}}]);
//# sourceMappingURL=40.bac1be715d.js.map