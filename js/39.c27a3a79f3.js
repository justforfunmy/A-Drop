(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{188:function(s,a,n){const l=n(0);s.exports=function(s){Object.keys(s).forEach((function(a){this[a]=s[a]}));return l.createElement("section",{className:"markdown"},l.createElement("h1",null,"事件流"),l.createElement("p",null,"事件，就是文档或者浏览器与用户的交互瞬间。简单地说，就是当用户操作时，比如点击按钮，浏览器做出相应的回应。所谓事件流，就是页面中事件接收的顺序。目前，主要有两种事件流，事件冒泡流和事件捕获流。"),l.createElement("pre",null,l.createElement("code",{className:"language-html",dangerouslySetInnerHTML:{__html:'<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;console.log(3)&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;console.log(2)&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;console.log(1)&quot;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>\n'}})),l.createElement("h2",null,"事件冒泡"),l.createElement("p",null,"事件冒泡的意思是事件从最具体的元素开始接收，然后逐级向上传播到不太具体的元素(或者是文档)。 例子中，如果你单击了 id 为 box 的 div，其事件的传播轨迹是 div>body>html>document",l.createElement("img",{src:"./media/md/event-bubble.png",alt:"事件冒泡.jpg"})),l.createElement("h2",null,"事件捕获"),l.createElement("p",null,"事件捕获的意思是事件从最不具体的元素（或者文档）就开始接收，然后逐级向里层具体的元素传播。同样，如果你单击了 id 为 box 的 div，其事件的传播轨迹是 document>html>body>div",l.createElement("img",{src:"./media/md/event-catch.png",alt:"事件捕获.jpg"}),l.createElement("strong",null,"尽管“DOM2 级事件”规范要求事件应该从 document 对象开始传播，但大部分浏览器都是从 window 对象开始捕获事件的")),l.createElement("h2",null,"事件流"),l.createElement("p",null,'"DOM2 级事件"规定事件流分为三个阶段：',l.createElement("strong",null,"事件捕获阶段，处于目标阶段，事件冒泡阶段"),"。首先发生的是事件捕获，为截获事件提供了机会。然后是实际的目标接收到事件。最后一个阶段是冒泡阶段，可以在这个阶段对事件做出响应。",l.createElement("img",{src:"./media/md/event-stream.png",alt:"事件流.jpg"})),l.createElement("p",null,"为了更加清晰直观地理解事件，下面通过具体案例来讲解："),l.createElement("pre",null,l.createElement("code",{className:"language-html",dangerouslySetInnerHTML:{__html:'<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">\n      <span class="hljs-selector-class">.outer</span> {\n        <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;\n        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;\n        <span class="hljs-attribute">background</span>: cadetblue;\n      }\n      <span class="hljs-selector-class">.middle</span> {\n        <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;\n        <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;\n        <span class="hljs-attribute">background</span>: indianred;\n      }\n      <span class="hljs-selector-class">.inner</span> {\n        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;\n        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;\n        <span class="hljs-attribute">background</span>: lawngreen;\n      }\n    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;outer&quot;</span>&gt;</span>\n      外层div\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;middle&quot;</span>&gt;</span>\n        中层div\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span>里层div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>\n'}})),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-comment">//addEventListener最后这个布尔值参数如果是 true，表示在捕获阶段调用事件处理程序；</span>\n<span class="hljs-comment">//如果是 false，表示在冒泡阶段调用事件处理程序。默认为false</span>\n<span class="hljs-keyword">let</span> capture = <span class="hljs-literal">true</span>;\n<span class="hljs-built_in">window</span>.addEventListener(\n  <span class="hljs-string">&#x27;click&#x27;</span>,\n  <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;window&#x27;</span>);\n  },\n  capture\n);\n<span class="hljs-built_in">document</span>.addEventListener(\n  <span class="hljs-string">&#x27;click&#x27;</span>,\n  <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;document&#x27;</span>);\n  },\n  capture\n);\n<span class="hljs-keyword">let</span> outer = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;outer&#x27;</span>);\nouter[<span class="hljs-number">0</span>].addEventListener(\n  <span class="hljs-string">&#x27;click&#x27;</span>,\n  <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;outer&#x27;</span>);\n  },\n  capture\n);\n<span class="hljs-keyword">let</span> middle = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;middle&#x27;</span>);\nmiddle[<span class="hljs-number">0</span>].addEventListener(\n  <span class="hljs-string">&#x27;click&#x27;</span>,\n  <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;middle&#x27;</span>);\n  },\n  capture\n);\n<span class="hljs-keyword">let</span> inner = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;inner&#x27;</span>);\ninner[<span class="hljs-number">0</span>].addEventListener(\n  <span class="hljs-string">&#x27;click&#x27;</span>,\n  <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;inner&#x27;</span>);\n  },\n  capture\n);\n'}})),l.createElement("p",null,l.createElement("img",{src:"./media/md/event-demo.png",alt:"事件案例.jpg"}),l.createElement("code",{dangerouslySetInnerHTML:{__html:"addEventListener"}}),"最后这个布尔值参数如果是",l.createElement("code",{dangerouslySetInnerHTML:{__html:"true"}}),"，表示",l.createElement("strong",null,"在捕获阶段调用事件处理程序"),"；如果是",l.createElement("code",{dangerouslySetInnerHTML:{__html:"false"}}),"，表示",l.createElement("strong",null,"在冒泡阶段调用事件处理程序"),"。默认为",l.createElement("code",{dangerouslySetInnerHTML:{__html:"false"}}),"。 当",l.createElement("code",{dangerouslySetInnerHTML:{__html:"capture"}}),"为",l.createElement("code",{dangerouslySetInnerHTML:{__html:"true"}}),"时，采用的是捕获事件流,即事件从外向里传播，当我们点击最里层的",l.createElement("code",{dangerouslySetInnerHTML:{__html:"div"}}),"，控制台输出如图所示：",l.createElement("img",{src:"./media/md/event-catch-demo.png",alt:"事件捕获案例.jpg"}),"当",l.createElement("code",{dangerouslySetInnerHTML:{__html:"capture"}}),"为",l.createElement("code",{dangerouslySetInnerHTML:{__html:"false"}}),"时，采用的是冒泡事件流,即事件从里向外传播，当我们点击最里层的",l.createElement("code",{dangerouslySetInnerHTML:{__html:"div"}}),"，控制台输出如图所示：",l.createElement("img",{src:"./media/md/event-bubble-demo.png",alt:"事件冒泡案例.jpg"}),"由于老版本的浏览器不支持，因此很少有人使用事件捕获。我们也建议读者放心地使用事件冒泡，在有特殊需要时再使用事件捕获。"))}}}]);
//# sourceMappingURL=39.c27a3a79f3.js.map