(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{195:function(n,s,e){const a=e(0);n.exports=function(n){Object.keys(n).forEach((function(s){this[s]=n[s]}));return a.createElement("section",{className:"markdown"},a.createElement("h1",null,"原生 JS 实现 new 方法"),a.createElement("p",null,"Javascript 中的",a.createElement("code",{dangerouslySetInnerHTML:{__html:"new"}}),"操作符实际上做了以下 4 件事情："),a.createElement("ol",null,a.createElement("li",null,"创建一个新的空对象"),a.createElement("li",null,"链接新创建的对象和构造函数的原型对象（就是将新对象的隐式原型",a.createElement("code",{dangerouslySetInnerHTML:{__html:"__proto__"}}),"指向构造函数的原型对象",a.createElement("code",{dangerouslySetInnerHTML:{__html:"prototype"}}),"）"),a.createElement("li",null,"执行构造函数，并将构造函数中的 ",a.createElement("code",{dangerouslySetInnerHTML:{__html:"this"}})," 指向新的对象"),a.createElement("li",null,"第三步如果没有返回对象，就返回 ",a.createElement("code",{dangerouslySetInnerHTML:{__html:"this"}}))),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createNew</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-comment">//创建新的空对象</span>\n  <span class="hljs-keyword">let</span> obj = {};\n  <span class="hljs-comment">//解构获得构造函数和参数</span>\n  <span class="hljs-keyword">let</span> [<span class="hljs-keyword">constructor</span>, ...params] = [...arguments];\n  //链接对象到函数原型\n  obj.__proto__ = <span class="hljs-keyword">constructor</span>.prototype;\n  //执行构造函数，将构造函数中的this指向obj对象\n  let result = <span class="hljs-keyword">constructor</span>.apply(obj, params);\n  //如果函数没有返回对象，就返回新创建的对象\n  return typeof result === &#x27;object&#x27; ? result : obj;\n}\n\nfunction Person(name) {\n  <span class="hljs-built_in">this</span>.name = name;\n  Person.prototype.sayName = <span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);\n  };\n}\n<span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;king&#x27;</span>);\na.sayName();\n<span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">//Person {name: &quot;king&quot;}</span>\n\n<span class="hljs-keyword">let</span> b = createNew(Person, <span class="hljs-string">&#x27;sara&#x27;</span>);\n<span class="hljs-built_in">console</span>.log(b); <span class="hljs-comment">//Person {name: &quot;sara&quot;}</span>\n'}})))}}}]);
//# sourceMappingURL=34.8146eba22f.js.map