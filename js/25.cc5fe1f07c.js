(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{186:function(s,n,a){const e=a(0);s.exports=function(s){Object.keys(s).forEach((function(n){this[n]=s[n]}));return e.createElement("section",{className:"markdown"},e.createElement("h1",null,"Promise(一)"),e.createElement("h2",null,"JavaScript 中的异步回调"),e.createElement("p",null,"在 JavaScript 中，所有代码都是单线程执行的。由于这个原因，很多情况下都需要异步操作。比如一些耗时的操作，无需等待操作完成，即可运行接下来的代码，等操作完成时执行相应的回调操作，ajax 就是典型的例子"),e.createElement("pre",null,e.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;before setTimeout&#x27;</span>);\n<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;callback done&#x27;</span>);\n}, <span class="hljs-number">1000</span>); <span class="hljs-comment">//1秒后执行回调</span>\n<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;after setTimeout&#x27;</span>);\n'}})),e.createElement("h2",null,"Promise"),e.createElement("p",null,"根据 MDN 的解释，一个  ",e.createElement("code",{dangerouslySetInnerHTML:{__html:"Promise"}}),"  就是一个代表了异步操作最终完成或者失败的对象。"),e.createElement("p",null,e.createElement("strong",null,"语法")),e.createElement("p",null,e.createElement("code",{dangerouslySetInnerHTML:{__html:"promise"}}),"本质上是一个绑定了回调的对象，而不是将回调传进函数内部。resolve 和 reject 函数被调用时，分别将",e.createElement("code",{dangerouslySetInnerHTML:{__html:"promise"}}),"的状态改为 fulfilled（完成）或 rejected（失败）。executor 内部通常会执行一些异步操作，一旦完成，可以调用 resolve 函数来将",e.createElement("code",{dangerouslySetInnerHTML:{__html:"promise"}}),"状态改成 fulfilled，或者在发生错误时将它的状态改为 rejected。"),e.createElement("pre",null,e.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {\n  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-keyword">let</span> num = <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span>;\n    <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">5</span>) {\n      resolve(<span class="hljs-string">&#x27;success&#x27;</span>);\n    } <span class="hljs-keyword">else</span> {\n      reject(<span class="hljs-string">&#x27;fail&#x27;</span>);\n    }\n  });\n});\np.then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {\n  <span class="hljs-built_in">console</span>.log(res);\n}).catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {\n  <span class="hljs-built_in">console</span>.log(err);\n});\n'}})),e.createElement("p",null,e.createElement("strong",null,"将普通异步函数封装成 Promise")," 1.原生 ajax 封装成",e.createElement("code",{dangerouslySetInnerHTML:{__html:"promise"}})),e.createElement("pre",null,e.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">let</span> jsGetAjaxPromise = <span class="hljs-function">(<span class="hljs-params">params</span>) =&gt;</span> {\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {\n    <span class="hljs-keyword">let</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();\n    xhr.open(<span class="hljs-string">&#x27;get&#x27;</span>, params.url, <span class="hljs-literal">true</span>);\n    xhr.onload = resolve;\n    xhr.onerror = reject;\n    xhr.send();\n  });\n};\n\n<span class="hljs-keyword">let</span> p1 = jsGetAjaxPromise({\n  <span class="hljs-attr">url</span>: baseUrl + <span class="hljs-string">&#x27;/api/Shops&#x27;</span>\n});\n\np1.then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {\n  <span class="hljs-built_in">console</span>.log(res);\n}).catch(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> {\n  <span class="hljs-built_in">console</span>.log(error);\n});\n'}})),e.createElement("p",null,"2.小程序",e.createElement("code",{dangerouslySetInnerHTML:{__html:"wx.request"}}),"封装成",e.createElement("code",{dangerouslySetInnerHTML:{__html:"promise"}})),e.createElement("pre",null,e.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-comment">/* wx.js */</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> wxPromise = <span class="hljs-function">(<span class="hljs-params">params</span>) =&gt;</span> {\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {\n    wx.request({\n      <span class="hljs-attr">url</span>: params.url,\n      <span class="hljs-attr">data</span>: params.data,\n      <span class="hljs-attr">header</span>: params.header,\n      <span class="hljs-attr">method</span>: params.method,\n      <span class="hljs-attr">dataType</span>: params.dataType,\n      <span class="hljs-attr">responseType</span>: params.responseType,\n      <span class="hljs-attr">success</span>: resolve,\n      <span class="hljs-attr">fail</span>: reject\n    });\n  });\n};\n\n<span class="hljs-comment">/* 使用 */</span>\n<span class="hljs-keyword">import</span> { wxPromise } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;wx.js&#x27;</span>;\nwxPromise({\n  <span class="hljs-attr">url</span>: baseUrl + <span class="hljs-string">&#x27;/api/Shops&#x27;</span>\n})\n  .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {\n    <span class="hljs-built_in">console</span>.log(res);\n  })\n  .catch(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> {\n    <span class="hljs-built_in">console</span>.log(error);\n  });\n'}})))}}}]);
//# sourceMappingURL=25.cc5fe1f07c.js.map