(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{213:function(n,s,e){const a=e(0);n.exports=function(n){Object.keys(n).forEach((function(s){this[s]=n[s]}));return a.createElement("section",{className:"markdown"},a.createElement("h1",null,"生命周期和组件更新"),a.createElement("p",null,"生命周期函数是针对类组件而言的，函数组件暂时没有生命周期的说法，函数组件自上而下执行。"),a.createElement("h2",null,"挂载阶段"),a.createElement("ul",null,a.createElement("li",null,a.createElement("p",null,"constructor:构造函数")),a.createElement("li",null,a.createElement("p",null,"componentWillMount:即将挂载")),a.createElement("li",null,a.createElement("p",null,"render:生成 vdom")),a.createElement("li",null,a.createElement("p",null,"componentDidMoun:挂载完成，此时已经有真实 dom"))),a.createElement("h2",null,"更新阶段"),a.createElement("ul",null,a.createElement("li",null,a.createElement("p",null,"componentWillReceiveProps:获得新的 props")),a.createElement("li",null,a.createElement("p",null,"shouldComponentUpdate:判断是否要更新,默认为 true")),a.createElement("li",null,a.createElement("p",null,"render:生成新的 vdom")),a.createElement("li",null,a.createElement("p",null,"componentDidUpdate:真实 dom 更新"))),a.createElement("h2",null,"实现"),a.createElement("p",null,"先写一个执行生命周期的公共函数"),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-comment">/**\n *\n * <span class="hljs-doctag">@param <span class="hljs-type">{*}</span> </span>host 组件实例\n * <span class="hljs-doctag">@param <span class="hljs-type">{*}</span> </span>name 生命周期名称\n * <span class="hljs-doctag">@param <span class="hljs-type">{*}</span> </span>args 生命周期函数入参\n */</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleLifeCycle</span>(<span class="hljs-params">host, name, ...args</span>) </span>{\n  <span class="hljs-keyword">if</span> (host[name]) {\n    <span class="hljs-comment">// eslint-disable-next-line prefer-spread</span>\n    <span class="hljs-keyword">return</span> host[name].apply(host, args);\n  }\n  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> handleLifeCycle;\n'}})),a.createElement("p",null,"根据是否是更新状态来按顺序执行不同的生命周期函数，其中 shouldComponentUpdate 返回 false 时，不向下执行其他生命周期函数"),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-comment">// 生命周期</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">executeLifeCycle</span>(<span class="hljs-params">instance</span>) </span>{\n  <span class="hljs-keyword">if</span> (!instance.vnode.update) {\n    handleLifeCycle(instance, <span class="hljs-string">&#x27;componentWillMount&#x27;</span>);\n  }\n  <span class="hljs-keyword">if</span> (instance.vnode.update) {\n    handleLifeCycle(instance, <span class="hljs-string">&#x27;componentWillReceiveProps&#x27;</span>);\n    <span class="hljs-keyword">if</span> (!handleLifeCycle(instance, <span class="hljs-string">&#x27;shouldComponentUpdate&#x27;</span>, instance.state, instance.props)) {\n      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;\n    }\n    emptyContainer(instance.rDom);\n  }\n  <span class="hljs-comment">//render函数重新执行获得新的vdom</span>\n  <span class="hljs-keyword">const</span> vdom = instance.render();\n  <span class="hljs-keyword">if</span> (!instance.vnode.update) {\n    handleLifeCycle(instance, <span class="hljs-string">&#x27;componentDidMount&#x27;</span>);\n  }\n  <span class="hljs-keyword">if</span> (instance.vnode.update) {\n    handleLifeCycle(instance, <span class="hljs-string">&#x27;componentDidUpdate&#x27;</span>);\n  }\n  <span class="hljs-keyword">return</span> vdom;\n}\n'}})),a.createElement("h1",null,"组件更新"),a.createElement("p",null,"组件第一次实例化的时候要把组件对象即 vnode，父级容器 container，以及真实 dom 都挂载到实例上去，以便更新的时候可以使用"),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> ins = <span class="hljs-keyword">new</span> type(props);\nins.vnode = vnode;\nins.container = container;\nvdom = executeLifeCycle(ins);\nrDom = renderComponent(vdom, container);\nins.rDom = rDom;\n'}})),a.createElement("p",null,"当调用 setState 更新时，将 update 属性设置为 true，并重新渲染整个组件，暂时先用整体替换，以后会加 diff 算法"),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">import</span> { renderComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../react-dom/DomRender&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Component</span> </span>{\n  <span class="hljs-keyword">constructor</span>(props) {\n    <span class="hljs-built_in">this</span>.props = props;\n  }\n\n  <span class="hljs-comment">/**\n   *\n   * <span class="hljs-doctag">@param <span class="hljs-type">{*}</span> </span>state 新的state\n   * <span class="hljs-doctag">@param <span class="hljs-type">{*}</span> </span>callback 回调函数\n   */</span>\n  setState(state, callback) {\n    <span class="hljs-built_in">this</span>.state = {\n      ...this.state,\n      ...state\n    };\n    <span class="hljs-built_in">this</span>.vnode.update = <span class="hljs-literal">true</span>;\n    renderComponent.call(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">this</span>.vnode, <span class="hljs-built_in">this</span>.rDom);\n  }\n\n  shouldComponentUpdate() {\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;\n  }\n\n  render() {}\n}\n'}})))}}}]);
//# sourceMappingURL=50.141270db1b.js.map