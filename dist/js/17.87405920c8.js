(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{151:function(s,e,n){const l=n(0);s.exports=function(s){Object.keys(s).forEach((function(e){this[e]=s[e]}));return l.createElement("section",{className:"markdown"},l.createElement("h1",null,"添加 css 模块"),l.createElement("blockquote",null,l.createElement("p",null,"注意：此功能在",l.createElement("code",{dangerouslySetInnerHTML:{__html:"react-scripts@2.0.0"}}),"及更高版本中可用。")),l.createElement("p",null,"该项目使用",l.createElement("code",{dangerouslySetInnerHTML:{__html:"[name] .module.css"}}),"文件命名约定与常规样式表一起支持",l.createElement("a",{href:"https://github.com/css-modules/css-modules"}," CSS Modules"),"。CSS 模块通过自动创建格式为",l.createElement("code",{dangerouslySetInnerHTML:{__html:"[filename]  _ [classname]  _  _ [hash]"}}),"的唯一类名来对 CSS 进行范围界定。"),l.createElement("blockquote",null,l.createElement("p",null,"提示：如果要使用 Sass 预处理样式表，请确保遵循安装说明，然后按如下所示更改样式表文件扩展名：",l.createElement("code",{dangerouslySetInnerHTML:{__html:"[name] .module.scss"}}),"或",l.createElement("code",{dangerouslySetInnerHTML:{__html:"[name] .module.sass"}}),"。")),l.createElement("p",null,"CSS 模块使您可以在不同文件中使用相同的 CSS 类名称，而不必担心命名冲突。在",l.createElement("a",{href:"https://github.com/css-modules/css-modules"},"此处"),"了解有关 CSS 模块的更多信息。"),l.createElement("h2",null,"Buttom.module.css"),l.createElement("pre",null,l.createElement("code",{className:"language-css",dangerouslySetInnerHTML:{__html:'<span class="hljs-selector-class">.error</span> {\n  <span class="hljs-attribute">background-color</span>: red;\n}\n'}})),l.createElement("h2",null,"another-stylesheet.css"),l.createElement("pre",null,l.createElement("code",{className:"language-css",dangerouslySetInnerHTML:{__html:'<span class="hljs-selector-class">.error</span> {\n  <span class="hljs-attribute">color</span>: red;\n}\n'}})),l.createElement("h2",null,"Button.js"),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">import</span> React, { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;\n<span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Button.module.css&#x27;</span>; <span class="hljs-comment">// Import css modules stylesheet as styles</span>\n<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./another-stylesheet.css&#x27;</span>; <span class="hljs-comment">// Import regular stylesheet</span>\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Button</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{\n  render() {\n    <span class="hljs-comment">// reference as a js object</span>\n    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{styles.error}</span>&gt;</span>Error Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;\n  }\n}\n'}})),l.createElement("h2",null,"效果"),l.createElement("p",null,"与其他",l.createElement("code",{dangerouslySetInnerHTML:{__html:".error"}}),"类名没有冲突"),l.createElement("pre",null,l.createElement("code",{className:"language-html",dangerouslySetInnerHTML:{__html:'<span class="hljs-comment">&lt;!-- This button has red background but not red text --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;Button_error_ax7yz&quot;</span>&gt;</span>Error Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n'}})),l.createElement("p",null,l.createElement("strong",null,"这是一项可选功能"),"。完全支持常规的",l.createElement("code",{dangerouslySetInnerHTML:{__html:"&lt;link&gt;"}}),"样式表和 CSS 文件。对于以",l.createElement("code",{dangerouslySetInnerHTML:{__html:".module.css"}}),"扩展名结尾的文件，将打开 CSS 模块。"))}}}]);
//# sourceMappingURL=17.87405920c8.js.map