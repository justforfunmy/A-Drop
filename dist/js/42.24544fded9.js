(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{205:function(s,n,l){const a=l(0);s.exports=function(s){Object.keys(s).forEach((function(n){this[n]=s[n]}));return a.createElement("section",{className:"markdown"},a.createElement("h1",null,"this 指向什么"),a.createElement("ul",null,a.createElement("li",null,"JavaScript 中，任何函数本质上是通过对象来调用的，如果没有直接指定，就是",a.createElement("code",{dangerouslySetInnerHTML:{__html:"window"}}),"对象")),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hi</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>);\n}\nhi(); <span class="hljs-comment">//hi</span>\n<span class="hljs-built_in">window</span>.hi(); <span class="hljs-comment">//hi</span>\n<span class="hljs-built_in">console</span>.log(hi === <span class="hljs-built_in">window</span>.hi); <span class="hljs-comment">//true</span>\n'}})),a.createElement("ul",null,a.createElement("li",null,"每个函数内部都有一个",a.createElement("code",{dangerouslySetInnerHTML:{__html:"this"}}),"，指向调用函数的对象")),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a);\n}\n<span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;\nfoo(); <span class="hljs-comment">//1,this指向window</span>\n<span class="hljs-keyword">let</span> obj = {\n  <span class="hljs-attr">a</span>: <span class="hljs-number">2</span>,\n  <span class="hljs-attr">foo</span>: foo\n};\nobj.foo(); <span class="hljs-comment">//2,this指向obj</span>\n<span class="hljs-keyword">var</span> c = <span class="hljs-keyword">new</span> foo(); <span class="hljs-comment">//undefined，this指向c</span>\n'}})),a.createElement("h2",null,"如何确定 this 的值"),a.createElement("p",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"this"}})," 值的指向基本可以分为以下 4 种情况："),a.createElement("ul",null,a.createElement("li",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"fn()"}}),":直接调用函数，此时",a.createElement("code",{dangerouslySetInnerHTML:{__html:"this"}}),"指向",a.createElement("code",{dangerouslySetInnerHTML:{__html:"window"}})),a.createElement("li",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"obj.fn()"}}),":通过对象调用，此时 ",a.createElement("code",{dangerouslySetInnerHTML:{__html:"this"}})," 指向当前调用该函数的对象"),a.createElement("li",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"new fn()"}}),":通过 ",a.createElement("code",{dangerouslySetInnerHTML:{__html:"new"}})," 创建对象，此时 ",a.createElement("code",{dangerouslySetInnerHTML:{__html:"this"}})," 指向创建的对象"),a.createElement("li",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"fn.call(obj)"}}),",",a.createElement("code",{dangerouslySetInnerHTML:{__html:"fn.apply(obj):call,apply"}})," 将 ",a.createElement("code",{dangerouslySetInnerHTML:{__html:"this"}})," 指向改成 obj")),a.createElement("h2",null,"综合例子"),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">color</span>) </span>{\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);\n  <span class="hljs-built_in">this</span>.color = color;\n  <span class="hljs-built_in">this</span>.getColor = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);\n    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.color;\n  };\n  <span class="hljs-built_in">this</span>.setColor = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">color</span>) </span>{\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);\n    <span class="hljs-built_in">this</span>.color = color;\n  };\n}\n\nPerson(<span class="hljs-string">&#x27;red&#x27;</span>); <span class="hljs-comment">//this是谁？window</span>\n<span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;Yellow&#x27;</span>); <span class="hljs-comment">//this是p</span>\np.getColor(); <span class="hljs-comment">//this是p</span>\n\n<span class="hljs-keyword">var</span> obj = {};\np.setColor.call(obj, <span class="hljs-string">&#x27;black&#x27;</span>); <span class="hljs-comment">//this是obj</span>\n\n<span class="hljs-keyword">var</span> test = p.setColor;\ntest(); <span class="hljs-comment">//this是window</span>\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun1</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun2</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sss&#x27;</span>);\n  };\n  fun2(); <span class="hljs-comment">//this是window</span>\n}\n'}})))}}}]);
//# sourceMappingURL=42.24544fded9.js.map