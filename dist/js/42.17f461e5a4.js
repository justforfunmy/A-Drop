(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{205:function(e,n,l){const s=l(0);e.exports=function(e){Object.keys(e).forEach((function(n){this[n]=e[n]}));return s.createElement("section",{className:"markdown"},s.createElement("h1",null,"React 结合 Electron 开发桌面应用入门"),s.createElement("p",null,"Electron 是 Github 发布的跨平台桌面应用开发工具，它支持使用 web 技术来开发桌面应用，即你可以使用 Html+css+JavaScript 来开发桌面应用，而不用学习新的桌面端开发语言。Electron 的图形界面渲染采用 Chromium 浏览器的内核实现，但又能通过 Node.js 调用丰富的原先操作系统 API。本文着眼于 Electron 结合 React 的开发实践。"),s.createElement("h2",null,"Electron 快速开始"),s.createElement("p",null,"首先，安装 electron"),s.createElement("pre",null,s.createElement("code",{className:"language-Shell",dangerouslySetInnerHTML:{__html:"npm install --save-dev electron\n"}})),s.createElement("p",null,"根据 Electron 官方的",s.createElement("a",{href:"https://github.com/electron/electron-quick-start"},"electron-quick-start"),"，创建 Electron 应用最基础的三个组成部分:"),s.createElement("ul",null,s.createElement("li",null,s.createElement("p",null,s.createElement("code",{dangerouslySetInnerHTML:{__html:"main.js"}})," 用于控制应用主进程")),s.createElement("li",null,s.createElement("p",null,s.createElement("code",{dangerouslySetInnerHTML:{__html:"index.html"}})," 用于控制渲染进程")),s.createElement("li",null,s.createElement("p",null,s.createElement("code",{dangerouslySetInnerHTML:{__html:"package.json"}})," 项目配置"))),s.createElement("p",null,"这里的主进程和渲染进程是 Electron 中的两个进程。主进程使用 ",s.createElement("code",{dangerouslySetInnerHTML:{__html:"BrowserWindow"}})," 实例创建页面。 每个 ",s.createElement("code",{dangerouslySetInnerHTML:{__html:"BrowserWindow"}}),"实例都在自己的渲染进程里运行页面。 当一个 ",s.createElement("code",{dangerouslySetInnerHTML:{__html:"BrowserWindow"}})," 实例被销毁后，相应的渲染进程也会被终止。"),s.createElement("p",null,s.createElement("code",{dangerouslySetInnerHTML:{__html:"index.html"}}),"这里不多说，就是一个网页文件。",s.createElement("code",{dangerouslySetInnerHTML:{__html:"main.js"}}),"中代码大致是这样的："),s.createElement("pre",null,s.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> { app, BrowserWindow } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>);\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createWindow</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-comment">// 创建浏览器窗口</span>\n  <span class="hljs-keyword">const</span> win = <span class="hljs-keyword">new</span> BrowserWindow({\n    <span class="hljs-attr">width</span>: <span class="hljs-number">800</span>,\n    <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>,\n    <span class="hljs-attr">webPreferences</span>: {\n      <span class="hljs-attr">nodeIntegration</span>: <span class="hljs-literal">true</span>\n    }\n  });\n\n  <span class="hljs-comment">// 并且为你的应用加载index.html</span>\n  win.loadFile(<span class="hljs-string">&#x27;index.html&#x27;</span>);\n\n  <span class="hljs-comment">// 打开开发者工具</span>\n  win.webContents.openDevTools();\n}\n\n<span class="hljs-comment">// Electron会在初始化完成并且准备好创建浏览器窗口时调用这个方法</span>\n<span class="hljs-comment">// 部分 API 在 ready 事件触发后才能使用。</span>\napp.whenReady().then(createWindow);\n\n<span class="hljs-comment">//当所有窗口都被关闭后退出</span>\napp.on(<span class="hljs-string">&#x27;window-all-closed&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-comment">// 在 macOS 上，除非用户用 Cmd + Q 确定地退出，</span>\n  <span class="hljs-comment">// 否则绝大部分应用及其菜单栏会保持激活。</span>\n  <span class="hljs-keyword">if</span> (process.platform !== <span class="hljs-string">&#x27;darwin&#x27;</span>) {\n    app.quit();\n  }\n});\n\napp.on(<span class="hljs-string">&#x27;activate&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-comment">// 在macOS上，当单击dock图标并且没有其他窗口打开时，</span>\n  <span class="hljs-comment">// 通常在应用程序中重新创建一个窗口。</span>\n  <span class="hljs-keyword">if</span> (BrowserWindow.getAllWindows().length === <span class="hljs-number">0</span>) {\n    createWindow();\n  }\n});\n\n<span class="hljs-comment">// 您可以把应用程序其他的流程写在在此文件中</span>\n<span class="hljs-comment">// 代码 也可以拆分成几个文件，然后用 require 导入。</span>\n'}})),s.createElement("p",null,"其中",s.createElement("code",{dangerouslySetInnerHTML:{__html:"win.loadFile('index.html')"}}),"用于窗口应用加载网页文件，即主进程和渲染进程的联通。"),s.createElement("p",null,"既然这样，我们是不是可以将使用 React 开发的单页应用打包后的",s.createElement("code",{dangerouslySetInnerHTML:{__html:"index.html"}}),"作为渲染的主页？答案是肯定的。"),s.createElement("p",null,s.createElement("code",{dangerouslySetInnerHTML:{__html:"package.json"}}),":"),s.createElement("pre",null,s.createElement("code",{className:"language-json",dangerouslySetInnerHTML:{__html:'{\n  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;your-app&quot;</span>,\n  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.1.0&quot;</span>,\n  <span class="hljs-attr">&quot;main&quot;</span>: <span class="hljs-string">&quot;main.js&quot;</span>,\n  <span class="hljs-attr">&quot;scripts&quot;</span>: {\n    <span class="hljs-attr">&quot;electron&quot;</span>: <span class="hljs-string">&quot;electron .&quot;</span>\n  }\n}\n'}})),s.createElement("p",null,"启动应用："),s.createElement("pre",null,s.createElement("code",{className:"language-Shell",dangerouslySetInnerHTML:{__html:"yarn electron\n"}})),s.createElement("h2",null,"React 结合 Electron"),s.createElement("p",null,"这里 React 应用采用 webpack 构建。webpack 中对于 electron 应用有提供支持"),s.createElement("ul",null,s.createElement("li",null,"开发模式")),s.createElement("p",null,"webpack 的配置中加一条："),s.createElement("pre",null,s.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-built_in">module</span>.exports = {\n  <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;electron-renderer&#x27;</span>\n};\n'}})),s.createElement("p",null,"表示构建完成的项目用于 electron 渲染。"),s.createElement("p",null,s.createElement("code",{dangerouslySetInnerHTML:{__html:"package.json"}}),"添加一条启动 react 应用的脚本"),s.createElement("pre",null,s.createElement("code",{className:"language-json",dangerouslySetInnerHTML:{__html:'{\n  <span class="hljs-attr">&quot;scripts&quot;</span>: {\n    <span class="hljs-attr">&quot;electron&quot;</span>: <span class="hljs-string">&quot;electron .&quot;</span>,\n    <span class="hljs-attr">&quot;start-renderer&quot;</span>: <span class="hljs-string">&quot;webpack-dev-server --config webpack.dev.js&quot;</span>,\n    <span class="hljs-attr">&quot;build-react&quot;</span>: <span class="hljs-string">&quot;webpack --progress --config webpack.react.js&quot;</span>\n  }\n}\n'}})),s.createElement("p",null,"然后",s.createElement("code",{dangerouslySetInnerHTML:{__html:"main.js"}}),"做相应修改"),s.createElement("pre",null,s.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-comment">// 加载应用----适用于 react 项目</span>\nwin.loadURL(<span class="hljs-string">&#x27;http://localhost:3000/&#x27;</span>);\n'}})),s.createElement("p",null,"启动 React："),s.createElement("pre",null,s.createElement("code",{className:"language-Shell",dangerouslySetInnerHTML:{__html:"yarn start-renderer\n"}})),s.createElement("p",null,"启动 Electron"),s.createElement("pre",null,s.createElement("code",{className:"language-Shell",dangerouslySetInnerHTML:{__html:"yarn electron\n"}})),s.createElement("p",null,"这样 react 项目的热更新也能应用到 electron 项目中。"),s.createElement("ul",null,s.createElement("li",null,"生成模式")),s.createElement("p",null,"webpack 的配置中加一条："),s.createElement("pre",null,s.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-built_in">module</span>.exports = {\n  <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;electron-preload&#x27;</span>\n};\n'}})),s.createElement("p",null,s.createElement("code",{dangerouslySetInnerHTML:{__html:"yarn build-renderer"}})," 打包 react 应用"),s.createElement("p",null,s.createElement("code",{dangerouslySetInnerHTML:{__html:"main.js"}}),"做相应修改"),s.createElement("pre",null,s.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'win.loadFile(<span class="hljs-string">&#x27;./dist/index.html&#x27;</span>);\n'}})),s.createElement("p",null,"然后使用",s.createElement("code",{dangerouslySetInnerHTML:{__html:"electron-builder"}}),"打包成客户端应用，打包的详细说明下次再讲。"))}}}]);
//# sourceMappingURL=42.17f461e5a4.js.map