(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{181:function(s,a,n){const l=n(0);s.exports=function(s){Object.keys(s).forEach((function(a){this[a]=s[a]}));return l.createElement("section",{className:"markdown"},l.createElement("h1",null,"滚动条挤压页面宽度的解决办法"),l.createElement("p",null,"问题描述：当页面高度超过 100%时，页面将会出现滚动条，滚动条就会挤压原先 body 的宽度，因为滚动条也有宽度，这就会造成页面的晃动，很不友好"),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'&lt;!DOCTYPE html&gt;\n<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">\n      * {\n        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;\n        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;\n      }\n\n      <span class="hljs-selector-class">.header</span> {\n        <span class="hljs-attribute">text-align</span>: right;\n        <span class="hljs-attribute">background-color</span>: red;\n        <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;\n      }\n\n      <span class="hljs-selector-class">.in</span> {\n        <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;\n        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;\n        <span class="hljs-attribute">background-color</span>: green;\n        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;\n      }\n\n      <span class="hljs-selector-class">.box</span> {\n        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;\n        <span class="hljs-attribute">height</span>: <span class="hljs-number">3000px</span>;\n      }\n    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;in&quot;</span>&gt;</span>\n        容器内容\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;more&quot;</span>&gt;</span>more<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n    <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#more&#x27;</span>);\n    btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-keyword">const</span> box = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);\n      box.setAttribute(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;box&#x27;</span>);\n      box.innerHTML = <span class="hljs-string">&#x27;hhhhhhhh&#x27;</span>;\n      <span class="hljs-built_in">document</span>.body.appendChild(box);\n    });\n  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span>\n\n'}})),l.createElement("p",null,"当我们点击 more 按钮时，因为新增的元素高度超过了视口高度，就会产生滚动条，此时由于滚动条的产生，容器内容就会向左移动一点，因为滚动条占据了部分视口宽度"),l.createElement("p",null,"解决方法可以有以下三种："),l.createElement("ul",null,l.createElement("li",null,"新属性 overlay")),l.createElement("p",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"overflow"}}),"有个新属性",l.createElement("code",{dangerouslySetInnerHTML:{__html:"overlay"}}),"，就是专门用来应对这种情况的，滚动条绘制在内容之上而不是占用空间。 仅在基于 WebKit（例如，Safari）和基于 Blink 的（例如，Chrome 或 Opera）浏览器中受支持。"),l.createElement("pre",null,l.createElement("code",{className:"language-css",dangerouslySetInnerHTML:{__html:'<span class="hljs-selector-tag">html</span> {\n  <span class="hljs-attribute">overflow-y</span>: overlay;\n}\n'}})),l.createElement("ul",null,l.createElement("li",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"margin-right:calc(100% - 100vw)"}}))),l.createElement("p",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"100vw"}}),"相当于浏览器的",l.createElement("code",{dangerouslySetInnerHTML:{__html:"window.innerWidth"}}),",是浏览器的内部宽度，",l.createElement("strong",null,"滚动条也计算在内"),"。而",l.createElement("code",{dangerouslySetInnerHTML:{__html:"100%"}}),"是可用宽度，不含滚动条的宽度。没有滚动条的时候相当于",l.createElement("code",{dangerouslySetInnerHTML:{__html:"margin:0"}}),"。有滚动条的时候就相当于",l.createElement("code",{dangerouslySetInnerHTML:{__html:"margin-right:-17px"}}),",这里的 17px 是 Chrome 的滚动条宽度，不同浏览器宽度可能不一致。被滚动条占据的 17px 后，内容再往右延伸了 17px，刚好补足了宽度。"),l.createElement("blockquote",null,l.createElement("p",null,"注意:calc 中要有空格，否则属性值无效")),l.createElement("pre",null,l.createElement("code",{className:"language-css",dangerouslySetInnerHTML:{__html:'<span class="hljs-selector-tag">html</span> {\n  <span class="hljs-attribute">overflow-y</span>: auto;\n  <span class="hljs-attribute">overflow-x</span>: hidden;\n}\n<span class="hljs-selector-class">.header</span> {\n  <span class="hljs-attribute">text-align</span>: right;\n  <span class="hljs-attribute">background-color</span>: red;\n  <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;\n  <span class="hljs-attribute">margin-right</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">100vw</span>);\n}\n'}})),l.createElement("ul",null,l.createElement("li",null,"绝对定位---来自张鑫旭")),l.createElement("p",null,l.createElement("a",{href:"https://www.zhangxinxu.com/wordpress/2015/01/css-page-scrollbar-toggle-center-no-jumping/"},"链接")),l.createElement("pre",null,l.createElement("code",{className:"language-css",dangerouslySetInnerHTML:{__html:'<span class="hljs-selector-tag">html</span> {\n  <span class="hljs-attribute">overflow-y</span>: scroll;\n}\n\n<span class="hljs-selector-pseudo">:root</span> {\n  <span class="hljs-attribute">overflow-y</span>: auto;\n  <span class="hljs-attribute">overflow-x</span>: hidden;\n}\n\n<span class="hljs-selector-pseudo">:root</span> <span class="hljs-selector-tag">body</span> {\n  <span class="hljs-attribute">position</span>: absolute;\n}\n\n<span class="hljs-selector-tag">body</span> {\n  <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;\n  <span class="hljs-attribute">overflow</span>: hidden;\n}\n'}})))}}}]);
//# sourceMappingURL=20.f9bc2791af.js.map