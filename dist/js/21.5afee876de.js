(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{165:function(s,n,a){const e=a(0);s.exports=function(s){Object.keys(s).forEach((function(n){this[n]=s[n]}));return e.createElement("section",{className:"markdown"},e.createElement("h1",null,"JSX"),e.createElement("p",null,e.createElement("code",{dangerouslySetInnerHTML:{__html:"JSX"}}),"是一种",e.createElement("code",{dangerouslySetInnerHTML:{__html:"JavaScript"}}),"的语法扩展，运用于",e.createElement("code",{dangerouslySetInnerHTML:{__html:"React"}}),"架构中，其格式比较像是模版语言，但事实上完全是在",e.createElement("code",{dangerouslySetInnerHTML:{__html:"JavaScript"}}),"内部实现的。我们能在",e.createElement("code",{dangerouslySetInnerHTML:{__html:"React"}}),"中直接编写",e.createElement("code",{dangerouslySetInnerHTML:{__html:"JSX"}}),"代码，得益于",e.createElement("a",{href:"https://www.babeljs.cn/"},"babel"),"的转译,比如："),e.createElement("pre",null,e.createElement("code",{className:"language-html",dangerouslySetInnerHTML:{__html:'<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>{test}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n'}})),e.createElement("p",null,"转译后："),e.createElement("pre",null,e.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-comment">/*#__PURE__*/</span>\nReact.createElement(\n  <span class="hljs-string">&#x27;div&#x27;</span>,\n  {\n    <span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;box&#x27;</span>\n  },\n  <span class="hljs-comment">/*#__PURE__*/</span> React.createElement(<span class="hljs-string">&#x27;span&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;test&#x27;</span>),\n  <span class="hljs-comment">/*#__PURE__*/</span> React.createElement(<span class="hljs-string">&#x27;span&#x27;</span>, <span class="hljs-literal">null</span>, test)\n);\n'}})),e.createElement("p",null,"也就是说转译之后默认会调用",e.createElement("code",{dangerouslySetInnerHTML:{__html:"React.createElement()"}}),"方法。这也侧面说明了即使你再写函数组件的时候没有显示地引用",e.createElement("code",{dangerouslySetInnerHTML:{__html:"React"}}),",也必须先",e.createElement("code",{dangerouslySetInnerHTML:{__html:"import React from 'react'"}})),e.createElement("h2",null,e.createElement("code",{dangerouslySetInnerHTML:{__html:"React.createElement()"}})),e.createElement("p",null,"这里精简了方法的实现原理，并作了相关注释"),e.createElement("pre",null,e.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> hasOwnProperty = <span class="hljs-built_in">Object</span>.prototype.hasOwnProperty;\n\n<span class="hljs-comment">/*\n *@param {*} type 元素类型，或是组件类名\n *@param {*} config 元素属性\n *@param {*} children 子元素\n */</span>\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createElement</span>(<span class="hljs-params">type, config, children</span>) </span>{\n  <span class="hljs-keyword">let</span> propName;\n\n  <span class="hljs-keyword">const</span> props = {};\n\n  <span class="hljs-comment">//循环遍历config中的属性，并添加为props的属性</span>\n  <span class="hljs-keyword">if</span> (config != <span class="hljs-literal">null</span>) {\n    <span class="hljs-keyword">for</span> (propName <span class="hljs-keyword">in</span> config) {\n      <span class="hljs-keyword">if</span> (hasOwnProperty.call(config, propName) &amp;&amp; !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  <span class="hljs-comment">//这段代码主要是为了将子元素作为一个数组，保存到props的children属性中。</span>\n  <span class="hljs-comment">//虽然形参只有一个children，但实参可能有多个，除了第一个是type和第二个是config，其他都是children，即实参列表的长度减2就是children的个数</span>\n  <span class="hljs-keyword">const</span> childrenLength = <span class="hljs-built_in">arguments</span>.length - <span class="hljs-number">2</span>;\n  <span class="hljs-keyword">if</span> (childrenLength === <span class="hljs-number">1</span>) {\n    <span class="hljs-comment">//如果只有一个children，直接赋值</span>\n    props.children = children;\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (childrenLength &gt; <span class="hljs-number">1</span>) {\n    <span class="hljs-comment">//如果children大于一个，就把所有children保存到数组中，赋值给props.children</span>\n    <span class="hljs-keyword">const</span> childArray = <span class="hljs-built_in">Array</span>(childrenLength);\n    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; childrenLength; i++) {\n      childArray[i] = <span class="hljs-built_in">arguments</span>[i + <span class="hljs-number">2</span>];\n    }\n    <span class="hljs-keyword">if</span> (__DEV__) {\n      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Object</span>.freeze) {\n        <span class="hljs-built_in">Object</span>.freeze(childArray);\n      }\n    }\n    props.children = childArray;\n  }\n\n  <span class="hljs-comment">//这里主要针对type是class类名的情况</span>\n  <span class="hljs-comment">//JSX中以大写字母开头的组件会被认为是自定义组件，以小写字母开头的会被认为是标签。自定义组件可能会有defaultProps</span>\n  <span class="hljs-keyword">if</span> (type &amp;&amp; type.defaultProps) {\n    <span class="hljs-keyword">const</span> defaultProps = type.defaultProps;\n    <span class="hljs-keyword">for</span> (propName <span class="hljs-keyword">in</span> defaultProps) {\n      <span class="hljs-keyword">if</span> (props[propName] === <span class="hljs-literal">undefined</span>) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  <span class="hljs-comment">//ReactElement可以认为是包含了这些属性的一个对象,类似这样的结构</span>\n  <span class="hljs-comment">/* {\n    type:&#x27;div&#x27;,\n    props:{\n      className:&#x27;box&#x27;,\n      children:{\n        type:&#x27;span&#x27;,\n        props:{\n          children:&#x27;test&#x27;\n        }\n      }\n    }\n  } */</span>\n  <span class="hljs-keyword">return</span> ReactElement(type, props);\n}\n'}})),e.createElement("p",null,"小结：",e.createElement("code",{dangerouslySetInnerHTML:{__html:"JSX"}}),"转译之后其实是一个",e.createElement("code",{dangerouslySetInnerHTML:{__html:"ReactElement"}}),"对象，虚拟 DOM 其实就是这样的一个 JS 对象。"))}}}]);
//# sourceMappingURL=21.5afee876de.js.map