(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{180:function(s,n,e){const a=e(0);s.exports=function(s){Object.keys(s).forEach((function(n){this[n]=s[n]}));return a.createElement("section",{className:"markdown"},a.createElement("h1",null,"组件渲染"),a.createElement("p",null,"我们在使用 React 时，一般都在入口文件处加以下代码："),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'ReactDOM.ender(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Hello</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>));\n'}})),a.createElement("p",null,"这就是渲染组件。接下来，我们来简单实现以下 render 函数"),a.createElement("h2",null,"render"),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-comment">/**\n *\n * <span class="hljs-doctag">@param <span class="hljs-type">{*}</span> </span>vnode 组件\n * <span class="hljs-doctag">@param <span class="hljs-type">{*}</span> </span>container 父级容器\n * <span class="hljs-doctag">@param <span class="hljs-type">{*}</span> </span>callback 回调函数\n */</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params">vnode, container, callback</span>) </span>{\n  <span class="hljs-comment">//deal with vnode...</span>\n\n  <span class="hljs-keyword">return</span> container;\n}\n'}})),a.createElement("p",null,"render 函数主要有两个功能，生成 virtual dom 和将 virtual dom 转化成真实 dom"),a.createElement("ul",null,a.createElement("li",null,"由 vnode 生成 virtual dom")),a.createElement("p",null,"这里的组件包含函数组件，类组件，标签，节点，其中标签和节点已经是 virtual dom 的形式了，不需要进一步处理。"),a.createElement("p",null,"对于函数组件，生成 Vdom 的方法是执行函数得到返回值;而对于类组件，是先实例化，然后执行对象的 render 方法"),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> type === <span class="hljs-string">&#x27;function&#x27;</span>) {\n  <span class="hljs-keyword">let</span> vdom;\n  <span class="hljs-keyword">if</span> (type.prototype &amp;&amp; type.prototype.render) {\n    <span class="hljs-keyword">const</span> ins = <span class="hljs-keyword">new</span> type(props);\n    vdom = ins.render();\n  } <span class="hljs-keyword">else</span> {\n    vdom = type(props);\n  }\n}\n'}})),a.createElement("p",null,"这里补充以下 React.Component 类："),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Component</span> </span>{\n  <span class="hljs-comment">//将参数挂到props属性上去</span>\n  <span class="hljs-keyword">constructor</span>(props) {\n    <span class="hljs-built_in">this</span>.props = props;\n  }\n\n  setState() {}\n\n  render() {}\n}\n'}})),a.createElement("ul",null,a.createElement("li",null,"将 virtual dom 转化成真实 dom")),a.createElement("p",null,"这里用到了 document 的一些基本操作，包括创建元素，设置属性等："),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-comment">//对于字符节点</span>\n<span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> vnode === <span class="hljs-string">&#x27;string&#x27;</span>) {\n  <span class="hljs-keyword">const</span> text = <span class="hljs-built_in">document</span>.createTextNode(vnode);\n  container.appendChild(text);\n  <span class="hljs-keyword">return</span> text;\n}\n<span class="hljs-comment">//对于标签</span>\n<span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> type === <span class="hljs-string">&#x27;string&#x27;</span>) {\n  <span class="hljs-keyword">const</span> element = <span class="hljs-built_in">document</span>.createElement(type);\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> props) {\n    <span class="hljs-keyword">if</span> (props.hasOwnProperty(key) &amp;&amp; key !== <span class="hljs-string">&#x27;children&#x27;</span>) {\n      <span class="hljs-comment">//将className转化成class</span>\n      <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;className&#x27;</span>) {\n        element.setAttribute(<span class="hljs-string">&#x27;class&#x27;</span>, props[key]);\n      } <span class="hljs-keyword">else</span> {\n        element.setAttribute(key, props[key]);\n      }\n    }\n  }\n  <span class="hljs-keyword">if</span> (props.children) {\n    <span class="hljs-comment">//对于子组件为多个时，依次调用render，并添加到当前组件尾部</span>\n    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(props.children)) {\n      props.children.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> {\n        element.appendChild(render(item, element));\n      });\n    } <span class="hljs-keyword">else</span> {\n      element.appendChild(render(props.children, element));\n    }\n  }\n  container.appendChild(element);\n  <span class="hljs-keyword">return</span> element;\n}\n'}})))}}}]);
//# sourceMappingURL=20.46af75a2eb.js.map