(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{226:function(s,n,a){const l=a(0);s.exports=function(s){Object.keys(s).forEach((function(n){this[n]=s[n]}));return l.createElement("section",{className:"markdown"},l.createElement("h1",null,"webpack 生产环境配置"),l.createElement("h2",null,"提取 css 为单独文件"),l.createElement("p",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"style-loader"}}),"会把 css 样式以",l.createElement("code",{dangerouslySetInnerHTML:{__html:"style节点"}}),"的形式加入到 html 标签中，实际开发中可能需要将 css 分离成单独文件，需要用到",l.createElement("code",{dangerouslySetInnerHTML:{__html:"mini-css-extract-plugin"}}),"插件"),l.createElement("pre",null,l.createElement("code",{className:"language-Shell",dangerouslySetInnerHTML:{__html:"yarn add mini-css-extract-plugin --dev\n"}})),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> MiniCssExtractPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);\n'}})),l.createElement("p",null,"用法:将所有",l.createElement("code",{dangerouslySetInnerHTML:{__html:"style-loader"}}),"替换成",l.createElement("code",{dangerouslySetInnerHTML:{__html:"MiniCssExtractPlugin.loader"}}),",并在",l.createElement("code",{dangerouslySetInnerHTML:{__html:"plugins"}}),"中添加该插件"),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> MiniCssExtractPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);\n\n<span class="hljs-built_in">module</span>.exports = {\n  <span class="hljs-attr">module</span>: {\n    <span class="hljs-attr">rules</span>: [\n      {\n        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/.css$/</span>,\n        use: [MiniCssExtractPlugin.loader, <span class="hljs-string">&#x27;css-loader&#x27;</span>]\n      },\n      {\n        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/.less$/</span>,\n        use: [MiniCssExtractPlugin.loader, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;less-loader&#x27;</span>]\n      },\n      {\n        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/.s[ac]ss$/</span>,\n        use: [MiniCssExtractPlugin.loader, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;sass-loader&#x27;</span>]\n      }\n    ]\n  },\n  <span class="hljs-attr">plugins</span>: [<span class="hljs-keyword">new</span> MiniCssExtractPlugin()]\n};\n'}})),l.createElement("h2",null,"css 兼容性处理"),l.createElement("p",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"postcss-loader"}}),"+",l.createElement("code",{dangerouslySetInnerHTML:{__html:"postcss-preset-env"}})),l.createElement("pre",null,l.createElement("code",{className:"language-Shell",dangerouslySetInnerHTML:{__html:"yarn add postcss-loader postcss-preset-env --dev\n"}})),l.createElement("p",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"postcss-preset-env"}}),"会根据配置好的浏览器兼容列表来做相应的兼容性处理，比如",l.createElement("code",{dangerouslySetInnerHTML:{__html:"autoprefixer"}}),"添加前缀，所以需要先在",l.createElement("code",{dangerouslySetInnerHTML:{__html:"package.json"}}),"中配置",l.createElement("code",{dangerouslySetInnerHTML:{__html:"browserslist"}}),":"),l.createElement("pre",null,l.createElement("code",{className:"language-json",dangerouslySetInnerHTML:{__html:'<span class="hljs-comment">//package.json</span>\n{\n  <span class="hljs-attr">&quot;browerslist&quot;</span>: {\n    <span class="hljs-attr">&quot;development&quot;</span>: [<span class="hljs-string">&quot;last 1 chrome version&quot;</span>, <span class="hljs-string">&quot;last 1 firefox version&quot;</span>, <span class="hljs-string">&quot;last 1 safari version&quot;</span>],\n    <span class="hljs-attr">&quot;production&quot;</span>: [<span class="hljs-string">&quot;&gt;0.2%&quot;</span>, <span class="hljs-string">&quot;not dead&quot;</span>, <span class="hljs-string">&quot;not op_mini all&quot;</span>]\n  }\n}\n'}})),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-built_in">module</span>.exports = {\n  <span class="hljs-comment">//...</span>\n  <span class="hljs-attr">module</span>: {\n    <span class="hljs-attr">rules</span>: [\n      {\n        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/.css$/</span>,\n        use: [\n          <span class="hljs-comment">//抽离css单独文件</span>\n          {\n            <span class="hljs-attr">loader</span>: MiniCssExtractPlugin.loader,\n            <span class="hljs-attr">options</span>: {\n              <span class="hljs-comment">//配置路径寻找从当前目录的上一级开始</span>\n              <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;../&#x27;</span>,\n              <span class="hljs-attr">hmr</span>: process.env.NODE_ENV === <span class="hljs-string">&#x27;development&#x27;</span>\n            }\n          },\n          <span class="hljs-string">&#x27;css-loader&#x27;</span>,\n          {\n            <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;postcss-loader&#x27;</span>,\n            <span class="hljs-attr">options</span>: {\n              <span class="hljs-attr">ident</span>: <span class="hljs-string">&#x27;postcss&#x27;</span>,\n              <span class="hljs-attr">plugins</span>: <span class="hljs-function">() =&gt;</span> [<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-preset-env&#x27;</span>)()]\n            }\n          }\n        ]\n      }\n    ]\n  }\n};\n'}})),l.createElement("h2",null,"css 压缩"),l.createElement("pre",null,l.createElement("code",{className:"language-Shell",dangerouslySetInnerHTML:{__html:"yarn add optimize-css-assets-webpack-plugin --dev\n"}})),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> OptimizeCssAssetsPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);\n<span class="hljs-built_in">module</span>.exports = {\n  <span class="hljs-comment">//...</span>\n  <span class="hljs-attr">plugins</span>: [<span class="hljs-keyword">new</span> OptimizeCssAssetsPlugin()]\n};\n'}})),l.createElement("h2",null,"js 语法检查"),l.createElement("p",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"eslint-loader"}}),",依赖于",l.createElement("code",{dangerouslySetInnerHTML:{__html:"eslint"}}),";主流规则配置：",l.createElement("code",{dangerouslySetInnerHTML:{__html:"eslint-config-airbnb"}}),"(包含 react) ",l.createElement("code",{dangerouslySetInnerHTML:{__html:"eslint-config-airbnb-base"}}),"(不包含 react)"),l.createElement("pre",null,l.createElement("code",{className:"language-Shell",dangerouslySetInnerHTML:{__html:"yarn add eslint-loader eslint --dev\n\nyarn add eslint-config-airbnb eslint-plugin-import eslint-plugin-react\neslint-plugin-react-hooks eslint-plugin-jsx-a11y --dev\n"}})),l.createElement("p",null,"配置："),l.createElement("ol",null,l.createElement("li",null,"在",l.createElement("code",{dangerouslySetInnerHTML:{__html:"package.json"}}),"中配置",l.createElement("code",{dangerouslySetInnerHTML:{__html:"eslintConfig"}}),"字段")),l.createElement("pre",null,l.createElement("code",{className:"language-json",dangerouslySetInnerHTML:{__html:'{\n  <span class="hljs-attr">&quot;eslintConfig&quot;</span>: {\n    <span class="hljs-attr">&quot;extends&quot;</span>: <span class="hljs-string">&quot;airbnb&quot;</span>,\n    <span class="hljs-attr">&quot;rules&quot;</span>: {\n      <span class="hljs-comment">//对于不同操作系统换行的问题进行修复</span>\n      <span class="hljs-attr">&quot;linebreak-style&quot;</span>: [<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-string">&quot;windows&quot;</span>],\n      <span class="hljs-comment">//修复强制引入到dependencies</span>\n      <span class="hljs-attr">&quot;import/no-extraneous-dependencies&quot;</span>: [\n        <span class="hljs-string">&quot;error&quot;</span>,\n        {\n          <span class="hljs-attr">&quot;devDependencies&quot;</span>: <span class="hljs-literal">true</span>\n        }\n      ]\n    }\n  }\n}\n'}})),l.createElement("ol",{start:"2"},l.createElement("li",null,"在",l.createElement("code",{dangerouslySetInnerHTML:{__html:"webpack.config.js"}}),"中配置规则")),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-built_in">module</span>.exports = {\n  <span class="hljs-comment">//...</span>\n  <span class="hljs-attr">module</span>: {\n    <span class="hljs-attr">rule</span>: [\n      {\n        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/.js$/</span>,\n        <span class="hljs-comment">//只检查自己写的js代码</span>\n        exclude: <span class="hljs-regexp">/node_modules/</span>,\n        loader: <span class="hljs-string">&#x27;eslint-loader&#x27;</span>,\n        <span class="hljs-attr">options</span>: {\n          <span class="hljs-comment">//自动修复</span>\n          <span class="hljs-attr">fix</span>: <span class="hljs-literal">true</span>\n        }\n      }\n    ]\n  }\n};\n'}})),l.createElement("h2",null,"js 兼容性处理"),l.createElement("p",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"babel-loader"}}),",",l.createElement("code",{dangerouslySetInnerHTML:{__html:"@babel/preset-env"}}),",",l.createElement("code",{dangerouslySetInnerHTML:{__html:"core-js"}})),l.createElement("pre",null,l.createElement("code",{className:"language-Shell",dangerouslySetInnerHTML:{__html:"yarn add babel-loader @babel/preset-env core-js --dev\n"}})),l.createElement("p",null,"配置："),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-built_in">module</span>.exports = {\n  <span class="hljs-comment">//...</span>\n  <span class="hljs-attr">rule</span>: [\n    {\n      <span class="hljs-comment">//避免冲突，先进行代码检查</span>\n      <span class="hljs-attr">enforce</span>: <span class="hljs-string">&#x27;pre&#x27;</span>,\n      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/.js$/</span>,\n      exclude: <span class="hljs-regexp">/node_modules/</span>,\n      loader: <span class="hljs-string">&#x27;eslint-loader&#x27;</span>,\n      <span class="hljs-attr">options</span>: {\n        <span class="hljs-attr">fix</span>: <span class="hljs-literal">true</span>\n      }\n    },\n    {\n      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/.js$/</span>,\n      exclude: <span class="hljs-regexp">/node_modules/</span>,\n      use: {\n        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,\n        <span class="hljs-attr">options</span>: {\n          <span class="hljs-comment">//代码预设</span>\n          <span class="hljs-attr">presets</span>: [\n            [\n              <span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>,\n              {\n                <span class="hljs-comment">//兼容性按需处理</span>\n                <span class="hljs-attr">useBuiltIns</span>: <span class="hljs-string">&#x27;usage&#x27;</span>,\n                <span class="hljs-attr">corejs</span>: {\n                  <span class="hljs-attr">version</span>: <span class="hljs-string">&#x27;3.6&#x27;</span>,\n                  <span class="hljs-attr">proposals</span>: <span class="hljs-literal">true</span>\n                }\n              }\n            ]\n          ]\n        }\n      }\n    }\n  ]\n};\n'}})),l.createElement("h2",null,"js 压缩，html 压缩"),l.createElement("p",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"mode:&quot;production&quot;"}}),"下自动压缩 js 代码"),l.createElement("p",null,"html 压缩："),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);\n<span class="hljs-built_in">module</span>.exports = {\n  <span class="hljs-comment">//...</span>\n  <span class="hljs-attr">plugins</span>: [\n    <span class="hljs-keyword">new</span> HtmlWebpackPlugin({\n      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./public/index.html&#x27;</span>,\n      <span class="hljs-comment">// html压缩</span>\n      <span class="hljs-attr">minify</span>: {\n        <span class="hljs-attr">collapseWhitespace</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">removeRedundantAttributes</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">removeScriptTypeAttributes</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">removeStyleLinkTypeAttributes</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">useShortDoctype</span>: <span class="hljs-literal">true</span>\n      }\n    })\n  ]\n};\n'}})),l.createElement("h2",null,"生产环境基本配置"),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);\n<span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);\n<span class="hljs-keyword">const</span> MiniCssExtractPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);\n<span class="hljs-keyword">const</span> { CleanWebpackPlugin } = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>);\n<span class="hljs-keyword">const</span> OptimizeCssAssetsPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);\n<span class="hljs-keyword">const</span> PostcssPresetEnv = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-preset-env&#x27;</span>);\n<span class="hljs-comment">// 决定browerslist用哪个模式</span>\nprocess.env.NODE_ENV = <span class="hljs-string">&#x27;production&#x27;</span>;\n\n<span class="hljs-keyword">const</span> CssCommonLoader = [\n  {\n    <span class="hljs-attr">loader</span>: MiniCssExtractPlugin.loader,\n    <span class="hljs-attr">options</span>: {\n      <span class="hljs-comment">// 配置路径寻找从当前目录的上一级开始</span>\n      <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;../&#x27;</span>,\n      <span class="hljs-attr">hmr</span>: process.env.NODE_ENV === <span class="hljs-string">&#x27;development&#x27;</span>\n    }\n  },\n  <span class="hljs-string">&#x27;css-loader&#x27;</span>,\n  {\n    <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;postcss-loader&#x27;</span>,\n    <span class="hljs-attr">options</span>: {\n      <span class="hljs-attr">ident</span>: <span class="hljs-string">&#x27;postcss&#x27;</span>,\n      <span class="hljs-attr">plugins</span>: <span class="hljs-function">() =&gt;</span> [PostcssPresetEnv()]\n    }\n  }\n];\n\n<span class="hljs-built_in">module</span>.exports = {\n  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,\n  <span class="hljs-attr">output</span>: {\n    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;js/bundle.js&#x27;</span>,\n    <span class="hljs-attr">path</span>: path.resolve(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>)\n  },\n  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;production&#x27;</span>,\n  <span class="hljs-comment">// 配置开发服务器</span>\n  <span class="hljs-attr">devServer</span>: {\n    <span class="hljs-attr">contentBase</span>: path.resolve(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),\n    <span class="hljs-comment">// gzip压缩</span>\n    <span class="hljs-attr">compress</span>: <span class="hljs-literal">true</span>,\n    <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>\n  },\n  <span class="hljs-attr">module</span>: {\n    <span class="hljs-attr">rules</span>: [\n      {\n        <span class="hljs-attr">enforce</span>: <span class="hljs-string">&#x27;pre&#x27;</span>,\n        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/.js$/</span>,\n        exclude: <span class="hljs-regexp">/node_modules/</span>,\n        loader: <span class="hljs-string">&#x27;eslint-loader&#x27;</span>,\n        <span class="hljs-attr">options</span>: {\n          <span class="hljs-attr">fix</span>: <span class="hljs-literal">true</span>\n        }\n      },\n      {\n        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/.js$/</span>,\n        exclude: <span class="hljs-regexp">/node_modules/</span>,\n        use: {\n          <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,\n          <span class="hljs-attr">options</span>: {\n            <span class="hljs-attr">presets</span>: [\n              [\n                <span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>,\n                {\n                  <span class="hljs-attr">useBuiltIns</span>: <span class="hljs-string">&#x27;usage&#x27;</span>,\n                  <span class="hljs-attr">corejs</span>: {\n                    <span class="hljs-attr">version</span>: <span class="hljs-string">&#x27;3.6&#x27;</span>,\n                    <span class="hljs-attr">proposals</span>: <span class="hljs-literal">true</span>\n                  }\n                }\n              ]\n            ]\n          }\n        }\n      },\n      {\n        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/.css$/</span>,\n        use: [...CssCommonLoader]\n      },\n      {\n        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/.less$/</span>,\n        use: [...CssCommonLoader, <span class="hljs-string">&#x27;less-loader&#x27;</span>]\n      },\n      {\n        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/.s[ac]ss$/</span>,\n        use: [...CssCommonLoader, <span class="hljs-string">&#x27;sass-loader&#x27;</span>]\n      },\n      {\n        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/.(png|jpg|gif|svg)$/</span>,\n        use: [\n          {\n            <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;url-loader&#x27;</span>,\n            <span class="hljs-attr">options</span>: {\n              <span class="hljs-comment">// eslint-disable-next-line no-unused-vars</span>\n              name(resourcePath, resourceQuery) {\n                <span class="hljs-keyword">if</span> (process.env.NODE_ENV === <span class="hljs-string">&#x27;development&#x27;</span>) {\n                  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;[path][name].[ext]&#x27;</span>;\n                }\n                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;[contenthash].[ext]&#x27;</span>;\n              },\n              <span class="hljs-attr">outputPath</span>: <span class="hljs-string">&#x27;media&#x27;</span>,\n              <span class="hljs-attr">limit</span>: <span class="hljs-number">8</span> * <span class="hljs-number">1024</span>\n            }\n          }\n        ]\n      },\n      {\n        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/.html$/</span>,\n        loader: <span class="hljs-string">&#x27;html-loader&#x27;</span>\n      },\n      {\n        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/.(css|less|scss|js|html|jpg|png|gif)$/</span>,\n        use: [\n          {\n            <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;file-loader&#x27;</span>,\n            <span class="hljs-attr">options</span>: {\n              <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;[name].[ext]&#x27;</span>,\n              <span class="hljs-attr">outputPath</span>: <span class="hljs-string">&#x27;static&#x27;</span>\n            }\n          }\n        ]\n      }\n    ]\n  },\n  <span class="hljs-attr">plugins</span>: [\n    <span class="hljs-keyword">new</span> HtmlWebpackPlugin({\n      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./public/index.html&#x27;</span>,\n      <span class="hljs-comment">// html压缩</span>\n      <span class="hljs-attr">minify</span>: {\n        <span class="hljs-attr">collapseWhitespace</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">removeRedundantAttributes</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">removeScriptTypeAttributes</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">removeStyleLinkTypeAttributes</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">useShortDoctype</span>: <span class="hljs-literal">true</span>\n      }\n    }),\n    <span class="hljs-keyword">new</span> MiniCssExtractPlugin({\n      <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;css/[name].css&#x27;</span>\n    }),\n    <span class="hljs-keyword">new</span> CleanWebpackPlugin(),\n    <span class="hljs-keyword">new</span> OptimizeCssAssetsPlugin()\n  ]\n};\n'}})))}}}]);
//# sourceMappingURL=59.d3baea7915.js.map