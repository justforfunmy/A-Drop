(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{204:function(s,n,a){const e=a(0);s.exports=function(s){Object.keys(s).forEach((function(n){this[n]=s[n]}));return e.createElement("section",{className:"markdown"},e.createElement("h1",null,"队列"),e.createElement("p",null,"队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作（first in first out ,FIFO），和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。现实中所有需要排队的事情都是队列的例子，比如排队买票等。"),e.createElement("h2",null,"javascript 实现"),e.createElement("pre",null,e.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-comment">//基于数组实现</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Queue</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-built_in">this</span>.items = [];\n}\n\n<span class="hljs-comment">//enqueue:向队列尾部添加一个或多个新的项</span>\nQueue.prototype.enqueue = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">element</span>) </span>{\n  <span class="hljs-built_in">this</span>.items.push(element);\n};\n\n<span class="hljs-comment">//dequeue:移除队列的第一个元素（即排在队列最前面），并返回被移除的元素</span>\nQueue.prototype.dequeue = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.shift();\n};\n\n<span class="hljs-comment">//front:返回队列中第一个元素，即最先被添加，也是最先被移除的元素,队列本身不做变动</span>\nQueue.prototype.front = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items[<span class="hljs-number">0</span>];\n};\n\n<span class="hljs-comment">//isEmpty:判断队列是否为空</span>\nQueue.prototype.isEmpty = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.length === <span class="hljs-number">0</span>;\n};\n\n<span class="hljs-comment">//size:返回队列中包含的元素个数</span>\nQueue.prototype.size = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.length;\n};\n\n<span class="hljs-comment">//toString:将队列中的内容转换成字符串格式</span>\nQueue.prototype.toString = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.join(<span class="hljs-string">&#x27; &#x27;</span>);\n};\n\n<span class="hljs-keyword">var</span> queue = <span class="hljs-keyword">new</span> Queue();\nqueue.enqueue(<span class="hljs-number">1</span>);\nqueue.enqueue(<span class="hljs-number">2</span>);\n<span class="hljs-built_in">console</span>.log(queue);\n'}})))}}}]);
//# sourceMappingURL=41.67e58f4235.js.map