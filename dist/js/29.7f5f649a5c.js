(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{189:function(e,n,s){const a=s(0);e.exports=function(e){Object.keys(e).forEach((function(n){this[n]=e[n]}));return a.createElement("section",{className:"markdown"},a.createElement("h1",null,"JS 数组的常用方法"),a.createElement("p",null,"本文从增删改查四个方面来罗列 Javascript 中数组的方法"),a.createElement("h2",null,"增"),a.createElement("ul",null,a.createElement("li",null,"头增:",a.createElement("code",{dangerouslySetInnerHTML:{__html:"unshift()"}}))),a.createElement("p",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"unshift"}}),"函数往数组的头部添加元素，该方法",a.createElement("strong",null,"改变原数组，并返回数组的长度")),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];\n<span class="hljs-keyword">const</span> len = array.unshift(<span class="hljs-number">0</span>);\n<span class="hljs-built_in">console</span>.log(len, array); <span class="hljs-comment">//4 , [0, 1, 2, 3]</span>\n'}})),a.createElement("ul",null,a.createElement("li",null,"尾增:",a.createElement("code",{dangerouslySetInnerHTML:{__html:"push()"}}))),a.createElement("p",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"push"}}),"函数往数组的尾部添加元素，该方法",a.createElement("strong",null,"改变原数组，并返回数组的长度")),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];\n<span class="hljs-keyword">const</span> len = array.push(<span class="hljs-number">4</span>);\n<span class="hljs-built_in">console</span>.log(len, array); <span class="hljs-comment">//4 , [1, 2, 3, 4]</span>\n'}})),a.createElement("h2",null,"删"),a.createElement("ul",null,a.createElement("li",null,"头删:",a.createElement("code",{dangerouslySetInnerHTML:{__html:"shift"}}))),a.createElement("p",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"shift"}}),"函数删除数组第一个元素，该方法",a.createElement("strong",null,"改变原数组，并返回被删除的元素")),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];\n<span class="hljs-keyword">const</span> res = array.shift();\n<span class="hljs-built_in">console</span>.log(res, array); <span class="hljs-comment">//1 , [2, 3]</span>\n'}})),a.createElement("ul",null,a.createElement("li",null,"尾删:",a.createElement("code",{dangerouslySetInnerHTML:{__html:"pop"}}))),a.createElement("p",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"pop"}}),"函数删除数组最后一个元素，该方法",a.createElement("strong",null,"改变原数组，并返回被删除的元素")),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];\n<span class="hljs-keyword">const</span> res = array.pop();\n<span class="hljs-built_in">console</span>.log(res, array); <span class="hljs-comment">//3 ， [1, 2]</span>\n'}})),a.createElement("ul",null,a.createElement("li",null,"任意位置删除元素，增加元素:",a.createElement("code",{dangerouslySetInnerHTML:{__html:"splice"}}))),a.createElement("p",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"splice"}}),"函数接收 3 个参数，起始位置，删除数量，要添加的元素，即可以在任意位置删除元素，也可以增加元素,该方法",a.createElement("strong",null,"改变原数组，并以数组的形式返回被删除的元素")),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];\n<span class="hljs-keyword">const</span> res = array.splice(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>);\n<span class="hljs-built_in">console</span>.log(res, array); <span class="hljs-comment">//[2, 3] , [1, 6, 7, 4]</span>\n'}})),a.createElement("h2",null,"改"),a.createElement("ul",null,a.createElement("li",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"forEach"}}))),a.createElement("p",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"forEach"}}),"函数接收回调函数，数组的每个元素都会执行该回调函数,该方法",a.createElement("strong",null,"总是返回 undefined，不会改变原数组"),",但是元素可以被回调函数改变，比如对象的属性改变"),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];\n<span class="hljs-keyword">const</span> res = array.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> {\n  item++;\n});\n<span class="hljs-built_in">console</span>.log(res, array); <span class="hljs-comment">// undefined,[1, 2, 3, 4]</span>\n'}})),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> array = [{ <span class="hljs-attr">number</span>: <span class="hljs-number">1</span> }, { <span class="hljs-attr">number</span>: <span class="hljs-number">2</span> }];\n<span class="hljs-keyword">const</span> res = array.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> {\n  item.number++;\n});\n<span class="hljs-built_in">console</span>.log(res, array); <span class="hljs-comment">//undefined,[{number:2},{number:3}]</span>\n'}})),a.createElement("ul",null,a.createElement("li",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"map"}}))),a.createElement("p",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"map"}}),"函数接收回调函数，数组的每个元素都会执行回调函数，并将返回值组成新的数组返回，该方法",a.createElement("strong",null,"不改变原数组，并返回新数组")),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];\n<span class="hljs-keyword">const</span> res = array.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item + <span class="hljs-number">1</span>);\n<span class="hljs-built_in">console</span>.log(res, array); <span class="hljs-comment">//[2,3,4],[1,2,3]</span>\n'}})),a.createElement("h2",null,"查"),a.createElement("ul",null,a.createElement("li",null,"查索引:",a.createElement("code",{dangerouslySetInnerHTML:{__html:"findIndex"}}))),a.createElement("p",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"findIndex"}}),"方法",a.createElement("strong",null,"返回数组中满足提供的测试函数的第一个元素的索引"),"。若没有找到对应元素则返回-1。该方法",a.createElement("strong",null,"不改变原数组")),a.createElement("p",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"indexOf"}}),"和",a.createElement("code",{dangerouslySetInnerHTML:{__html:"lastIndexOf"}}),"也可以查元素索引"),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];\n<span class="hljs-keyword">const</span> res = array.findIndex(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item &gt; <span class="hljs-number">1</span>);\n<span class="hljs-built_in">console</span>.log(res, array); <span class="hljs-comment">//1 , [1, 2, 3]</span>\n'}})),a.createElement("ul",null,a.createElement("li",null,"查元素:",a.createElement("code",{dangerouslySetInnerHTML:{__html:"find"}}))),a.createElement("p",null,"和",a.createElement("code",{dangerouslySetInnerHTML:{__html:"findIndex"}}),"方法类似，不过返回的是元素，如果找不到返回 undefined"),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];\n<span class="hljs-keyword">const</span> res = array.find(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item &gt; <span class="hljs-number">1</span>);\n<span class="hljs-built_in">console</span>.log(res, array); <span class="hljs-comment">//2 , [1, 2, 3]</span>\n'}})),a.createElement("ul",null,a.createElement("li",null,"过滤元素:",a.createElement("code",{dangerouslySetInnerHTML:{__html:"filter"}}))),a.createElement("p",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"filter"}})," 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。该方法",a.createElement("strong",null,"不改变原数组")),a.createElement("pre",null,a.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];\n<span class="hljs-keyword">const</span> res = array.filter(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item &gt; <span class="hljs-number">1</span>);\n<span class="hljs-built_in">console</span>.log(res, array); <span class="hljs-comment">// [2,3],[1,2,3]</span>\n'}})))}}}]);
//# sourceMappingURL=29.7f5f649a5c.js.map