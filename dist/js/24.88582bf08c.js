(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{168:function(e,s,n){const l=n(0);e.exports=function(e){Object.keys(e).forEach((function(s){this[s]=e[s]}));return l.createElement("section",{className:"markdown"},l.createElement("h1",null,"Ajax 原生实现"),l.createElement("p",null,"来自百度百科：Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。 Ajax = 异步 JavaScript 和 XML 或者是 HTML（标准通用标记语言的子集）。 Ajax 是一种用于创建快速动态网页的技术。 Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。 通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。"),l.createElement("h2",null,"原生实现"),l.createElement("ol",null,l.createElement("li",null,"获取",l.createElement("code",{dangerouslySetInnerHTML:{__html:"XMLHttpRequest"}}),"对象")),l.createElement("p",null,"使用",l.createElement("code",{dangerouslySetInnerHTML:{__html:"XMLHttpRequest（XHR）"}}),"对象可以与服务器交互。您可以从 URL 获取数据，而无需让整个的页面刷新。这允许网页在不影响用户的操作的情况下更新页面的局部内容。在 AJAX 编程中，",l.createElement("code",{dangerouslySetInnerHTML:{__html:"XMLHttpRequest"}})," 被大量使用。 更多详情请移步 MDN：https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest"),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">let</span> xhr;\n<span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) {\n  <span class="hljs-comment">//应用于所有新版本的浏览器</span>\n  xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.ActiveXObject) {\n  <span class="hljs-comment">//兼容老版本浏览器</span>\n  xhr = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&#x27;Microsoft.XMLHTTP&#x27;</span>);\n}\n'}})),l.createElement("ol",{start:"2"},l.createElement("li",null,"配置请求参数")),l.createElement("p",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"XMLHttpRequest"}}),"对象的",l.createElement("code",{dangerouslySetInnerHTML:{__html:"open"}}),"方法用于配置参数，第一个参数为请求方法，第二个参数是请求地址，第三个参数是是否异步请求，默认为",l.createElement("code",{dangerouslySetInnerHTML:{__html:"true"}})),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;/test/&#x27;</span>, <span class="hljs-literal">true</span>);\n'}})),l.createElement("ol",{start:"3"},l.createElement("li",null,"配置完毕，用 ",l.createElement("code",{dangerouslySetInnerHTML:{__html:"send"}})," 方法发送请求")),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:"xhr.send();\n"}})),l.createElement("ol",{start:"4"},l.createElement("li",null,"监听服务器返回状态并对返回数据进行处理,",l.createElement("code",{dangerouslySetInnerHTML:{__html:"onreadystatechange"}})," 事件用于监听")),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) {\n    <span class="hljs-comment">// readyState为4表示请求响应完成</span>\n    <span class="hljs-keyword">if</span> (xhr.status === <span class="hljs-number">200</span>) {\n      <span class="hljs-comment">// status为200表示请求成功</span>\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;执行成功&#x27;</span>);\n    } <span class="hljs-keyword">else</span> {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;执行出错&#x27;</span>);\n    }\n  }\n};\n'}})),l.createElement("h2",null,"关于 readystate 和 status"),l.createElement("ol",null,l.createElement("li",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"readystate"}})," 有 5 种值，分别为：")),l.createElement("ul",null,l.createElement("li",null,"0: 请求未初始化"),l.createElement("li",null,"1: 服务器连接已建立"),l.createElement("li",null,"2: 请求已接收"),l.createElement("li",null,"3: 请求处理中"),l.createElement("li",null,"4: 请求已完成，且响应已就绪")),l.createElement("ol",{start:"2"},l.createElement("li",null,l.createElement("code",{dangerouslySetInnerHTML:{__html:"status"}})," 可以分为 5 类，分别为：")),l.createElement("ul",null,l.createElement("li",null,"1xx: 这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束"),l.createElement("li",null,"2xx:这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。例如 200 标识 OK"),l.createElement("li",null,"3xx:这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的 Location 域中指明。"),l.createElement("li",null,"4xx:这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。例如 404 Not Found"),l.createElement("li",null,"5xx，6xx：这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。例如 500 Internal Server Error")),l.createElement("h3",null,"完整的实现代码是："),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">let</span> xhr;\n<span class="hljs-comment">//1.获取XMLHttpRequest对象</span>\n<span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) {\n  <span class="hljs-comment">//应用于所有新版本的浏览器</span>\n  xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.ActiveXObject) {\n  <span class="hljs-comment">//兼容老版本浏览器</span>\n  xhr = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&#x27;Microsoft.XMLHTTP&#x27;</span>);\n}\n\n<span class="hljs-comment">//2.配置请求参数</span>\n<span class="hljs-keyword">if</span> (xhr) {\n  xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;/test/&#x27;</span>, <span class="hljs-literal">true</span>);\n  <span class="hljs-comment">//3.配置完毕，用send方法发送请求</span>\n  xhr.send();\n  <span class="hljs-comment">//4.监听服务器返回状态并对返回数据进行处理,onreadystatechange事件用于监听</span>\n  xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) {\n      <span class="hljs-keyword">if</span> (xhr.status === <span class="hljs-number">200</span>) {\n        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;执行成功&#x27;</span>);\n      } <span class="hljs-keyword">else</span> {\n        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;执行出错&#x27;</span>);\n      }\n    }\n  };\n}\n'}})))}}}]);
//# sourceMappingURL=24.88582bf08c.js.map