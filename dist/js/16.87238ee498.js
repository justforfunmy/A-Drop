(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{165:function(e,n,t){const a=t(0);e.exports=function(e){Object.keys(e).forEach((function(n){this[n]=e[n]}));return a.createElement("section",{className:"markdown"},a.createElement("h1",null,"CSS 盒模型"),a.createElement("p",null,"根据 MDN 的解释：当对一个文档进行布局（lay out）的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）。CSS 决定这些盒子的大小、位置以及属性（例如颜色、背景、边框尺寸…）。即每个盒子包含四部分：内容区域（content），内边距(padding)，边框(border)，外边距(margin)（由内而外）。"),a.createElement("pre",null,a.createElement("code",{className:"language-css",dangerouslySetInnerHTML:{__html:'<span class="hljs-selector-class">.box</span> {\n  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;\n  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;\n  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#111</span>;\n  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;\n}\n'}})),a.createElement("pre",null,a.createElement("code",{className:"language-html",dangerouslySetInnerHTML:{__html:'<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>\n  content\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n'}})),a.createElement("p",null,"在 chrome 开发者工具中选中",a.createElement("code",{dangerouslySetInnerHTML:{__html:".box"}}),"的元素，可以发现该元素的实际宽度并不是设置的",a.createElement("code",{dangerouslySetInnerHTML:{__html:"100px"}}),"，而是",a.createElement("code",{dangerouslySetInnerHTML:{__html:"100+20*2+1*2=142px"}}),",即包含内容区域，内边距，边框的总宽度。"),a.createElement("p",null,"引用 chrome 中的盒子模型图：",a.createElement("img",{src:"./media/md/content-box.png",alt:"盒模型content-box.jpg"})),a.createElement("p",null,"这点和我们平时的认知并不相符，此时就需要",a.createElement("code",{dangerouslySetInnerHTML:{__html:"box-sizing"}}),"这个属性。",a.createElement("code",{dangerouslySetInnerHTML:{__html:"box-sizing"}}),"的值是用来设定",a.createElement("code",{dangerouslySetInnerHTML:{__html:"width"}}),",",a.createElement("code",{dangerouslySetInnerHTML:{__html:"height"}}),"的作用对象的，默认是",a.createElement("code",{dangerouslySetInnerHTML:{__html:"content-box"}}),"，即",a.createElement("code",{dangerouslySetInnerHTML:{__html:"width"}}),"作用域",a.createElement("code",{dangerouslySetInnerHTML:{__html:"content"}}),"区域，当把",a.createElement("code",{dangerouslySetInnerHTML:{__html:"box-sizing"}}),"设置为",a.createElement("code",{dangerouslySetInnerHTML:{__html:"border-box"}}),"，情况就不一样了，",a.createElement("code",{dangerouslySetInnerHTML:{__html:"width"}}),"的作用对象是",a.createElement("code",{dangerouslySetInnerHTML:{__html:"border"}}),"以内的区域。"),a.createElement("p",null,a.createElement("code",{dangerouslySetInnerHTML:{__html:"box-sizing"}}),"设置为",a.createElement("code",{dangerouslySetInnerHTML:{__html:"border-box"}}),"后的盒子模型图：",a.createElement("img",{src:"./media/md/content-box.png",alt:"盒模型border-box.jpg"}),"为了更加符合我们的认知，设置为",a.createElement("code",{dangerouslySetInnerHTML:{__html:"border-box"}}),"为最佳实践。"))}}}]);
//# sourceMappingURL=16.87238ee498.js.map