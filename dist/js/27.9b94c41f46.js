(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{187:function(s,n,a){const l=a(0);s.exports=function(s){Object.keys(s).forEach((function(n){this[n]=s[n]}));return l.createElement("section",{className:"markdown"},l.createElement("h1",null,"Virtual DOM"),l.createElement("p",null,"实现一个简易版的 react，仅仅为了表达思想，可能有多处不严谨。"),l.createElement("h2",null,"React 组件"),l.createElement("p",null,"在 React 中，组件无非就两种形式，函数组件和类组件（还有标签组件就不说了，基本不用特殊处理）："),l.createElement("p",null,"函数组件时这样的："),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">const</span> Hello = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> (\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">A</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;welcome&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>{props.name}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n);\n'}})),l.createElement("p",null,"类组件是这样的："),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Welcome</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{\n  <span class="hljs-keyword">constructor</span>() {\n    <span class="hljs-built_in">super</span>(...arguments);\n  }\n\n  render() {\n    <span class="hljs-keyword">return</span> (\n      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>{this.props.title}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{logo}</span> /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n    );\n  }\n}\n'}})),l.createElement("p",null,"创建组件的过程就是函数执行和实例化类的过程，其中函数组件返回的和类组件实例执行 render 函数都返回 JSX。"),l.createElement("p",null,"JSX 是一种类似 html 模板的 JavaScript 代码，需要经由 babel 转译，生成以下代码："),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-meta">&#x27;use strict&#x27;</span>;\n\n<span class="hljs-keyword">const</span> Hello = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span>\n  <span class="hljs-comment">/*#__PURE__*/</span> React.createElement(\n    <span class="hljs-string">&#x27;div&#x27;</span>,\n    {\n      <span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;wrapper&#x27;</span>\n    },\n    <span class="hljs-comment">/*#__PURE__*/</span> React.createElement(A, {\n      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;welcome&#x27;</span>\n    }),\n    <span class="hljs-comment">/*#__PURE__*/</span> React.createElement(\n      <span class="hljs-string">&#x27;span&#x27;</span>,\n      {\n        <span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;title&#x27;</span>\n      },\n      props.name\n    ),\n    <span class="hljs-comment">/*#__PURE__*/</span> React.createElement(<span class="hljs-string">&#x27;span&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;123456&#x27;</span>)\n  );\n'}})),l.createElement("p",null,"其中就引用了 React 中的 ",l.createElement("code",{dangerouslySetInnerHTML:{__html:"createElement"}})," 方法,我们可以看到该函数的入参第一个是元素类型，第二个是元素属性，剩下的是元素的子集，可能是一个或者多个。当我们将组件以",l.createElement("code",{dangerouslySetInnerHTML:{__html:"&lt;Hello name='hello'/&gt;"}}),"的方式应用时，实际就是调用了",l.createElement("code",{dangerouslySetInnerHTML:{__html:"React.createElement(Hello,{name:'hello'})"}}),",最后返回的是一个对象，就像这样："),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'{\n\t<span class="hljs-attr">$$type</span>:<span class="hljs-built_in">Symbol</span>(react.element),\n\t<span class="hljs-attr">key</span>:<span class="hljs-literal">null</span>,\n\t<span class="hljs-attr">ref</span>:<span class="hljs-literal">null</span>,\n\t<span class="hljs-attr">props</span>:{<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;hello&#x27;</span>}\n\t<span class="hljs-attr">type</span>:Hello\n}\n'}})),l.createElement("p",null,"其中$$type 表示 React 元素类型，key 和 ref 分别代表属性 key 和 dom 节点，本文暂不需要实现，但传递给函数的属性值都要映射到 props 属性中。"),l.createElement("h2",null,"createElement"),l.createElement("p",null,"接下来，我们来实现以下",l.createElement("code",{dangerouslySetInnerHTML:{__html:"createElement"}}),"函数，其中关键是映射属性和处理子组件"),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-comment">//映射属性到props</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapConfigToProps</span>(<span class="hljs-params">props, config</span>) </span>{\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> config) {\n    <span class="hljs-keyword">if</span> (config.hasOwnProperty(key)) {\n      props[key] = config[key];\n    }\n  }\n}\n<span class="hljs-comment">/**\n *\n * <span class="hljs-doctag">@param <span class="hljs-type">{*}</span> </span>type 组件本身\n * <span class="hljs-doctag">@param <span class="hljs-type">{*}</span> </span>config 组件属性\n * <span class="hljs-doctag">@param <span class="hljs-type">{*}</span> </span>children 子组件\n */</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createElement</span>(<span class="hljs-params">type, config, children</span>) </span>{\n  <span class="hljs-keyword">const</span> props = {};\n  mapConfigToProps(props, config);\n\n  <span class="hljs-comment">//从第三个参数往后都是子组件</span>\n  <span class="hljs-keyword">const</span> childrenLength = <span class="hljs-built_in">arguments</span>.length - <span class="hljs-number">2</span>;\n\n  <span class="hljs-keyword">if</span> (childrenLength === <span class="hljs-number">1</span>) {\n    props.children = children;\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (childrenLength &gt; <span class="hljs-number">1</span>) {\n    <span class="hljs-keyword">const</span> childArray = <span class="hljs-built_in">Array</span>(childrenLength);\n\n    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; childrenLength; i += <span class="hljs-number">1</span>) {\n      <span class="hljs-comment">// eslint-disable-next-line prefer-rest-params</span>\n      childArray[i] = <span class="hljs-built_in">arguments</span>[i + <span class="hljs-number">2</span>];\n    }\n\n    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Object</span>.freeze) {\n      <span class="hljs-built_in">Object</span>.freeze(childArray);\n    }\n    props.children = childArray;\n  }\n  <span class="hljs-keyword">return</span> {\n    type,\n    props\n  };\n}\n'}})),l.createElement("p",null,"Virtual Dom 其实就是一个对象形成的树状结构"))}}}]);
//# sourceMappingURL=27.9b94c41f46.js.map