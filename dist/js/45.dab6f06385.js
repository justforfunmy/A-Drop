(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{209:function(s,n,a){const l=a(0);s.exports=function(s){Object.keys(s).forEach((function(n){this[n]=s[n]}));return l.createElement("section",{className:"markdown"},l.createElement("h1",null,"什么是栈"),l.createElement("p",null,"栈（stack）又名堆栈，它是一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。简单地说，后进先出（last in first out ,LIFO）。"),l.createElement("h2",null,"JavaScript 实现（基于数组）"),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-comment">//基于数组实现</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Stack</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-built_in">this</span>.items = [];\n}\n\n<span class="hljs-comment">//push:添加一个元素到栈顶</span>\nStack.prototype.push = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">element</span>) </span>{\n  <span class="hljs-built_in">this</span>.items.push(element);\n};\n\n<span class="hljs-comment">//pop:移除栈顶的元素，同时返回被移除的元素</span>\nStack.prototype.pop = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.pop();\n};\n\n<span class="hljs-comment">//peek:返回栈顶的元素，不对栈做任何修改</span>\nStack.prototype.peek = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items[<span class="hljs-built_in">this</span>.items.length - <span class="hljs-number">1</span>];\n};\n\n<span class="hljs-comment">//isEmpty:判断栈是否为空</span>\nStack.prototype.isEmpty = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.length === <span class="hljs-number">0</span>;\n};\n\n<span class="hljs-comment">//size:返回栈里元素的个数</span>\nStack.prototype.size = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.length;\n};\n\n<span class="hljs-comment">//toString:将栈结构以字符串形式返回</span>\nStack.prototype.toString = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.join(<span class="hljs-string">&#x27; &#x27;</span>);\n};\n\n<span class="hljs-keyword">let</span> stack = <span class="hljs-keyword">new</span> Stack();\nstack.push(<span class="hljs-number">1</span>);\nstack.push(<span class="hljs-number">2</span>);\n<span class="hljs-built_in">console</span>.log(stack.peek(), stack.isEmpty(), stack.toString());\n'}})),l.createElement("h2",null,"应用：十进制转二进制"),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dec2bin</span>(<span class="hljs-params">number</span>) </span>{\n  <span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> Stack();\n  <span class="hljs-keyword">while</span> (number / <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) {\n    s.push(number % <span class="hljs-number">2</span>);\n    number = <span class="hljs-built_in">Math</span>.floor(number / <span class="hljs-number">2</span>);\n  }\n  <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span>;\n  <span class="hljs-keyword">while</span> (!s.isEmpty()) {\n    str += s.pop();\n  }\n  <span class="hljs-keyword">return</span> str;\n}\n<span class="hljs-built_in">console</span>.log(dec2bin(<span class="hljs-number">10</span>));\n'}})))}}}]);
//# sourceMappingURL=45.dab6f06385.js.map