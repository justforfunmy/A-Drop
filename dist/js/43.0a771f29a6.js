(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{192:function(s,n,a){const l=a(0);s.exports=function(s){Object.keys(s).forEach((function(n){this[n]=s[n]}));return l.createElement("section",{className:"markdown"},l.createElement("h1",null,"单向链表"),l.createElement("p",null,"单向链表（单链表）是链表的一种，其特点是链表的链接方向是单向的，对链表的访问要通过顺序读取从头部开始；链表是使用指针进行构造的列表；又称为结点列表，因为链表是由一个个结点组装起来的；其中每个结点都有指针成员变量指向列表中的下一个结点；列表是由结点构成，head 指针指向第一个成为表头结点，而终止于最后一个指向 NULL 的指针。",l.createElement("img",{src:"./media/md/linked-list.png",alt:"单向链表图示.png"})),l.createElement("h2",null,"JavaScript 实现"),l.createElement("pre",null,l.createElement("code",{className:"language-js",dangerouslySetInnerHTML:{__html:'<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">LinkedList</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Node</span>(<span class="hljs-params">data</span>) </span>{\n    <span class="hljs-built_in">this</span>.data = data;\n    <span class="hljs-built_in">this</span>.next = <span class="hljs-literal">null</span>;\n  }\n  <span class="hljs-built_in">this</span>.head = <span class="hljs-literal">null</span>;\n  <span class="hljs-built_in">this</span>.length = <span class="hljs-number">0</span>;\n\n  <span class="hljs-comment">//append:向列表尾部添加一个项</span>\n  LinkedList.prototype.append = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">element</span>) </span>{\n    <span class="hljs-comment">//判断head是否为空</span>\n    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.head === <span class="hljs-literal">null</span>) {\n      <span class="hljs-built_in">this</span>.head = <span class="hljs-keyword">new</span> Node(element);\n    } <span class="hljs-keyword">else</span> {\n      <span class="hljs-comment">//找到next为空的节点</span>\n      <span class="hljs-keyword">let</span> current = <span class="hljs-built_in">this</span>.head;\n      <span class="hljs-keyword">while</span> (current.next != <span class="hljs-literal">null</span>) {\n        current = current.next;\n      }\n      current.next = <span class="hljs-keyword">new</span> Node(element);\n    }\n    <span class="hljs-built_in">this</span>.length++;\n  };\n\n  <span class="hljs-comment">//insert(position,element):向列表的特定位置插入一个新的项</span>\n  LinkedList.prototype.insert = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">position, element</span>) </span>{\n    <span class="hljs-keyword">if</span> (position &lt; <span class="hljs-number">0</span> || position &gt; <span class="hljs-built_in">this</span>.length) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\n    <span class="hljs-keyword">let</span> node = <span class="hljs-keyword">new</span> Node(element);\n    <span class="hljs-keyword">if</span> (position === <span class="hljs-number">0</span>) {\n      <span class="hljs-keyword">let</span> head = <span class="hljs-built_in">this</span>.head;\n      <span class="hljs-built_in">this</span>.head = node;\n      node.next = head;\n    } <span class="hljs-keyword">else</span> {\n      <span class="hljs-keyword">let</span> current = <span class="hljs-built_in">this</span>.head;\n      <span class="hljs-comment">//找到对应位置的前一项</span>\n      <span class="hljs-keyword">while</span> (position &gt; <span class="hljs-number">1</span>) {\n        current = current.next;\n        position--;\n      }\n      <span class="hljs-comment">//获取当前项的原始next值</span>\n      <span class="hljs-keyword">let</span> pre = current.next;\n      <span class="hljs-comment">//让当前项的next指向插入的节点</span>\n      current.next = node;\n      <span class="hljs-comment">//让插入的节点的next值指向原始的next节点</span>\n      node.next = pre;\n    }\n    <span class="hljs-built_in">this</span>.length++;\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;\n  };\n\n  <span class="hljs-comment">//get(position):获取对应位置的元素</span>\n  LinkedList.prototype.get = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">position</span>) </span>{\n    <span class="hljs-keyword">if</span> (position &lt; <span class="hljs-number">0</span> || position &gt; <span class="hljs-built_in">this</span>.length - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\n    <span class="hljs-keyword">let</span> current = <span class="hljs-built_in">this</span>.head;\n    <span class="hljs-keyword">while</span> (position-- &gt; <span class="hljs-number">0</span>) {\n      current = current.next;\n    }\n    <span class="hljs-keyword">return</span> current.data;\n  };\n\n  <span class="hljs-comment">//indexOf(element):返回元素在列表中的索引。如果列表中没有则返回-1</span>\n  LinkedList.prototype.indexOf = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">element</span>) </span>{\n    <span class="hljs-keyword">let</span> current = <span class="hljs-built_in">this</span>.head;\n    <span class="hljs-keyword">let</span> idx = <span class="hljs-number">0</span>;\n    <span class="hljs-keyword">while</span> (current) {\n      <span class="hljs-keyword">if</span> (current.data === element) {\n        <span class="hljs-keyword">return</span> idx;\n      } <span class="hljs-keyword">else</span> {\n        current = current.next;\n        idx++;\n      }\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;\n  };\n\n  <span class="hljs-comment">//removeAt(position):从列表的特定位置移除一项</span>\n  LinkedList.prototype.removeAt = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">position</span>) </span>{\n    <span class="hljs-keyword">if</span> (position &lt; <span class="hljs-number">0</span> || position &gt;= <span class="hljs-built_in">this</span>.length) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\n    <span class="hljs-keyword">if</span> (position === <span class="hljs-number">0</span>) {\n      <span class="hljs-built_in">this</span>.head = <span class="hljs-built_in">this</span>.head.next;\n    } <span class="hljs-keyword">else</span> {\n      <span class="hljs-keyword">let</span> current = <span class="hljs-built_in">this</span>.head;\n      <span class="hljs-keyword">while</span> (position &gt; <span class="hljs-number">1</span>) {\n        current = current.next;\n        position--;\n      }\n      current.next = current.next.next;\n    }\n    <span class="hljs-built_in">this</span>.length--;\n  };\n\n  <span class="hljs-comment">//remove(element):从列表中移除一项</span>\n  LinkedList.prototype.remove = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">element</span>) </span>{\n    <span class="hljs-keyword">let</span> idx = <span class="hljs-built_in">this</span>.indexOf(element);\n    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.removeAt(idx);\n  };\n\n  <span class="hljs-comment">//isEmpty():判断链表是否为空</span>\n  LinkedList.prototype.isEmpty = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.length === <span class="hljs-number">0</span>;\n  };\n\n  <span class="hljs-comment">//size():返回链表中元素的个数</span>\n  LinkedList.prototype.size = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.length;\n  };\n\n  <span class="hljs-comment">//toString():字符串表达</span>\n}\n\n<span class="hljs-keyword">let</span> l = <span class="hljs-keyword">new</span> LinkedList();\nl.append(<span class="hljs-number">1</span>);\nl.append(<span class="hljs-number">3</span>);\nl.append(<span class="hljs-number">11</span>);\nl.insert(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>);\nl.insert(<span class="hljs-number">3</span>, <span class="hljs-number">7</span>);\nl.insert(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>);\nl.removeAt(<span class="hljs-number">3</span>);\n<span class="hljs-built_in">console</span>.log(l);\n'}})),l.createElement("p",null,l.createElement("img",{src:"./media/md/linked-list-insert.png",alt:"单向链表insert算法图解.png"})))}}}]);
//# sourceMappingURL=43.0a771f29a6.js.map